// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cosmos/bls/v1/checkpoint.proto

package types

import (
	bytes "bytes"
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_crypto_keys_bls12381 "github.com/cosmos/cosmos-sdk/crypto/keys/bls12381"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// CheckpointStatus is the status of a checkpoint.
type CheckpointStatus int32

const (
	// ACCUMULATING defines a checkpoint that is awaiting for BLS signatures.
	Accumulating CheckpointStatus = 0
	// SEALED defines a checkpoint that has accumulated sufficient BLS signatures.
	Sealed CheckpointStatus = 1
	// SUBMITTED defines a checkpoint that is included on BTC.
	Submitted CheckpointStatus = 2
	// CONFIRMED defines a checkpoint that is k-deep on BTC.
	Confirmed CheckpointStatus = 3
	// FINALIZED defines a checkpoint that is w-deep on BTC.
	Finalized CheckpointStatus = 4
)

var CheckpointStatus_name = map[int32]string{
	0: "CKPT_STATUS_ACCUMULATING",
	1: "CKPT_STATUS_SEALED",
	2: "CKPT_STATUS_SUBMITTED",
	3: "CKPT_STATUS_CONFIRMED",
	4: "CKPT_STATUS_FINALIZED",
}

var CheckpointStatus_value = map[string]int32{
	"CKPT_STATUS_ACCUMULATING": 0,
	"CKPT_STATUS_SEALED":       1,
	"CKPT_STATUS_SUBMITTED":    2,
	"CKPT_STATUS_CONFIRMED":    3,
	"CKPT_STATUS_FINALIZED":    4,
}

func (x CheckpointStatus) String() string {
	return proto.EnumName(CheckpointStatus_name, int32(x))
}

func (CheckpointStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_b0ec43bdbba80584, []int{0}
}

// RawCheckpoint wraps the BLS multi sig with meta data
type RawCheckpoint struct {
	// epoch_num defines the epoch number the raw checkpoint is for
	EpochNum uint64 `protobuf:"varint,1,opt,name=epoch_num,json=epochNum,proto3" json:"epoch_num,omitempty"`
	// last_commit_hash defines the 'LastCommitHash' that individual BLS sigs are
	// signed on
	LastCommitHash *LastCommitHash `protobuf:"bytes,2,opt,name=last_commit_hash,json=lastCommitHash,proto3,customtype=LastCommitHash" json:"last_commit_hash,omitempty"`
	// bitmap defines the bitmap that indicates the signers of the BLS multi sig
	Bitmap []byte `protobuf:"bytes,3,opt,name=bitmap,proto3" json:"bitmap,omitempty"`
	// bls_multi_sig defines the multi sig that is aggregated from individual BLS
	// sigs
	BlsMultiSig *github_com_cosmos_cosmos_sdk_crypto_keys_bls12381.Signature `protobuf:"bytes,4,opt,name=bls_multi_sig,json=blsMultiSig,proto3,customtype=github.com/cosmos/cosmos-sdk/crypto/keys/bls12381.Signature" json:"bls_multi_sig,omitempty"`
}

func (m *RawCheckpoint) Reset()         { *m = RawCheckpoint{} }
func (m *RawCheckpoint) String() string { return proto.CompactTextString(m) }
func (*RawCheckpoint) ProtoMessage()    {}
func (*RawCheckpoint) Descriptor() ([]byte, []int) {
	return fileDescriptor_b0ec43bdbba80584, []int{0}
}
func (m *RawCheckpoint) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RawCheckpoint) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RawCheckpoint.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RawCheckpoint) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RawCheckpoint.Merge(m, src)
}
func (m *RawCheckpoint) XXX_Size() int {
	return m.Size()
}
func (m *RawCheckpoint) XXX_DiscardUnknown() {
	xxx_messageInfo_RawCheckpoint.DiscardUnknown(m)
}

var xxx_messageInfo_RawCheckpoint proto.InternalMessageInfo

func (m *RawCheckpoint) GetEpochNum() uint64 {
	if m != nil {
		return m.EpochNum
	}
	return 0
}

func (m *RawCheckpoint) GetBitmap() []byte {
	if m != nil {
		return m.Bitmap
	}
	return nil
}

// RawCheckpointWithMeta wraps the raw checkpoint with meta data.
type RawCheckpointWithMeta struct {
	Ckpt *RawCheckpoint `protobuf:"bytes,1,opt,name=ckpt,proto3" json:"ckpt,omitempty"`
	// status defines the status of the checkpoint
	Status CheckpointStatus `protobuf:"varint,2,opt,name=status,proto3,enum=cosmos.bls.v1.CheckpointStatus" json:"status,omitempty"`
	// bls_aggr_pk defines the aggregated BLS public key
	BlsAggrPk *github_com_cosmos_cosmos_sdk_crypto_keys_bls12381.PublicKey `protobuf:"bytes,3,opt,name=bls_aggr_pk,json=blsAggrPk,proto3,customtype=github.com/cosmos/cosmos-sdk/crypto/keys/bls12381.PublicKey" json:"bls_aggr_pk,omitempty"`
	// power_sum defines the accumulated voting power for the checkpoint
	PowerSum uint64 `protobuf:"varint,4,opt,name=power_sum,json=powerSum,proto3" json:"power_sum,omitempty"`
	// lifecycle defines the lifecycle of this checkpoint, i.e., each state
	// transition and the time (in both timestamp and block height) of this
	// transition.
	Lifecycle []*CheckpointStateUpdate `protobuf:"bytes,5,rep,name=lifecycle,proto3" json:"lifecycle,omitempty"`
}

func (m *RawCheckpointWithMeta) Reset()         { *m = RawCheckpointWithMeta{} }
func (m *RawCheckpointWithMeta) String() string { return proto.CompactTextString(m) }
func (*RawCheckpointWithMeta) ProtoMessage()    {}
func (*RawCheckpointWithMeta) Descriptor() ([]byte, []int) {
	return fileDescriptor_b0ec43bdbba80584, []int{1}
}
func (m *RawCheckpointWithMeta) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RawCheckpointWithMeta) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RawCheckpointWithMeta.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RawCheckpointWithMeta) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RawCheckpointWithMeta.Merge(m, src)
}
func (m *RawCheckpointWithMeta) XXX_Size() int {
	return m.Size()
}
func (m *RawCheckpointWithMeta) XXX_DiscardUnknown() {
	xxx_messageInfo_RawCheckpointWithMeta.DiscardUnknown(m)
}

var xxx_messageInfo_RawCheckpointWithMeta proto.InternalMessageInfo

func (m *RawCheckpointWithMeta) GetCkpt() *RawCheckpoint {
	if m != nil {
		return m.Ckpt
	}
	return nil
}

func (m *RawCheckpointWithMeta) GetStatus() CheckpointStatus {
	if m != nil {
		return m.Status
	}
	return Accumulating
}

func (m *RawCheckpointWithMeta) GetPowerSum() uint64 {
	if m != nil {
		return m.PowerSum
	}
	return 0
}

func (m *RawCheckpointWithMeta) GetLifecycle() []*CheckpointStateUpdate {
	if m != nil {
		return m.Lifecycle
	}
	return nil
}

// CheckpointStateUpdate defines a state transition on the checkpoint.
type CheckpointStateUpdate struct {
	// state defines the event of a state transition towards this state
	State CheckpointStatus `protobuf:"varint,1,opt,name=state,proto3,enum=cosmos.bls.v1.CheckpointStatus" json:"state,omitempty"`
	// block_height is the height of the Babylon block that triggers the state
	// update
	BlockHeight uint64 `protobuf:"varint,2,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	// block_time is the timestamp in the Babylon block that triggers the state
	// update
	BlockTime *time.Time `protobuf:"bytes,3,opt,name=block_time,json=blockTime,proto3,stdtime" json:"block_time,omitempty"`
}

func (m *CheckpointStateUpdate) Reset()         { *m = CheckpointStateUpdate{} }
func (m *CheckpointStateUpdate) String() string { return proto.CompactTextString(m) }
func (*CheckpointStateUpdate) ProtoMessage()    {}
func (*CheckpointStateUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_b0ec43bdbba80584, []int{2}
}
func (m *CheckpointStateUpdate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CheckpointStateUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CheckpointStateUpdate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CheckpointStateUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckpointStateUpdate.Merge(m, src)
}
func (m *CheckpointStateUpdate) XXX_Size() int {
	return m.Size()
}
func (m *CheckpointStateUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckpointStateUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_CheckpointStateUpdate proto.InternalMessageInfo

func (m *CheckpointStateUpdate) GetState() CheckpointStatus {
	if m != nil {
		return m.State
	}
	return Accumulating
}

func (m *CheckpointStateUpdate) GetBlockHeight() uint64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *CheckpointStateUpdate) GetBlockTime() *time.Time {
	if m != nil {
		return m.BlockTime
	}
	return nil
}

// BlsSig wraps the BLS sig with meta data.
type BlsSig struct {
	// epoch_num defines the epoch number that the BLS sig is signed on
	EpochNum uint64 `protobuf:"varint,1,opt,name=epoch_num,json=epochNum,proto3" json:"epoch_num,omitempty"`
	// last_commit_hash defines the 'LastCommitHash' that the BLS sig is signed on
	LastCommitHash *LastCommitHash                                              `protobuf:"bytes,2,opt,name=last_commit_hash,json=lastCommitHash,proto3,customtype=LastCommitHash" json:"last_commit_hash,omitempty"`
	BlsSig         *github_com_cosmos_cosmos_sdk_crypto_keys_bls12381.Signature `protobuf:"bytes,3,opt,name=bls_sig,json=blsSig,proto3,customtype=github.com/cosmos/cosmos-sdk/crypto/keys/bls12381.Signature" json:"bls_sig,omitempty"`
	// can't find cosmos_proto.scalar when compiling due to cosmos v0.45.4 does
	// not support scalar string signer_address = 4 [(cosmos_proto.scalar) =
	// "cosmos.AddressString"]; the signer_address defines the address of the
	// signer
	SignerAddress string `protobuf:"bytes,4,opt,name=signer_address,json=signerAddress,proto3" json:"signer_address,omitempty"`
}

func (m *BlsSig) Reset()         { *m = BlsSig{} }
func (m *BlsSig) String() string { return proto.CompactTextString(m) }
func (*BlsSig) ProtoMessage()    {}
func (*BlsSig) Descriptor() ([]byte, []int) {
	return fileDescriptor_b0ec43bdbba80584, []int{3}
}
func (m *BlsSig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BlsSig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BlsSig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BlsSig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlsSig.Merge(m, src)
}
func (m *BlsSig) XXX_Size() int {
	return m.Size()
}
func (m *BlsSig) XXX_DiscardUnknown() {
	xxx_messageInfo_BlsSig.DiscardUnknown(m)
}

var xxx_messageInfo_BlsSig proto.InternalMessageInfo

func (m *BlsSig) GetEpochNum() uint64 {
	if m != nil {
		return m.EpochNum
	}
	return 0
}

func (m *BlsSig) GetSignerAddress() string {
	if m != nil {
		return m.SignerAddress
	}
	return ""
}

func init() {
	proto.RegisterEnum("cosmos.bls.v1.CheckpointStatus", CheckpointStatus_name, CheckpointStatus_value)
	proto.RegisterType((*RawCheckpoint)(nil), "cosmos.bls.v1.RawCheckpoint")
	proto.RegisterType((*RawCheckpointWithMeta)(nil), "cosmos.bls.v1.RawCheckpointWithMeta")
	proto.RegisterType((*CheckpointStateUpdate)(nil), "cosmos.bls.v1.CheckpointStateUpdate")
	proto.RegisterType((*BlsSig)(nil), "cosmos.bls.v1.BlsSig")
}

func init() { proto.RegisterFile("cosmos/bls/v1/checkpoint.proto", fileDescriptor_b0ec43bdbba80584) }

var fileDescriptor_b0ec43bdbba80584 = []byte{
	// 763 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x94, 0x61, 0x8b, 0xe3, 0x44,
	0x18, 0xc7, 0x9b, 0xdd, 0x5c, 0xbd, 0xce, 0x6e, 0x97, 0x30, 0xb8, 0x52, 0xaa, 0xa4, 0x75, 0x51,
	0x28, 0x82, 0x89, 0xdb, 0x43, 0x14, 0x15, 0x8e, 0xb4, 0xdb, 0xf5, 0xca, 0xb5, 0x75, 0x49, 0x5a,
	0x94, 0x7b, 0x13, 0x26, 0xd3, 0xd9, 0xc9, 0x90, 0x49, 0x27, 0x64, 0x26, 0x77, 0xd6, 0x4f, 0x20,
	0xfb, 0xea, 0xbe, 0xc0, 0x82, 0xe0, 0x97, 0xf0, 0x23, 0x88, 0xaf, 0xee, 0xa5, 0xdc, 0x8b, 0x53,
	0x76, 0xdf, 0xc8, 0x81, 0xdf, 0x41, 0x32, 0xe9, 0x79, 0xf6, 0x4e, 0x0e, 0x11, 0x7d, 0xd5, 0xcc,
	0x7f, 0xfe, 0xcf, 0xf0, 0x3c, 0xbf, 0xe7, 0x4f, 0x81, 0x8d, 0x85, 0x4c, 0x85, 0x74, 0x23, 0x2e,
	0xdd, 0xfb, 0xc7, 0x2e, 0x8e, 0x09, 0x4e, 0x32, 0xc1, 0x56, 0xca, 0xc9, 0x72, 0xa1, 0x04, 0x6c,
	0x56, 0xf7, 0x4e, 0xc4, 0xa5, 0x73, 0xff, 0xb8, 0xdd, 0xa1, 0x42, 0x50, 0x4e, 0x5c, 0x7d, 0x19,
	0x15, 0xe7, 0xae, 0x62, 0x29, 0x91, 0x0a, 0xa5, 0x59, 0xe5, 0x6f, 0xbf, 0x4e, 0x05, 0x15, 0xfa,
	0xd3, 0x2d, 0xbf, 0x2a, 0xf5, 0xe8, 0x77, 0x03, 0x34, 0x7d, 0xf4, 0x60, 0xf8, 0xe7, 0xeb, 0xf0,
	0x4d, 0xd0, 0x20, 0x99, 0xc0, 0x71, 0xb8, 0x2a, 0xd2, 0x96, 0xd1, 0x35, 0x7a, 0xa6, 0x7f, 0x53,
	0x0b, 0xb3, 0x22, 0x85, 0x9f, 0x01, 0x8b, 0x23, 0xa9, 0x42, 0x2c, 0xd2, 0x94, 0xa9, 0x30, 0x46,
	0x32, 0x6e, 0xed, 0x74, 0x8d, 0xde, 0xfe, 0x00, 0x3e, 0x7e, 0xd2, 0x39, 0x98, 0x20, 0xa9, 0x86,
	0xfa, 0xea, 0x0e, 0x92, 0xb1, 0x7f, 0xc0, 0xb7, 0xce, 0xf0, 0x0d, 0x50, 0x8f, 0x98, 0x4a, 0x51,
	0xd6, 0xda, 0x2d, 0x6b, 0xfc, 0xcd, 0x09, 0x62, 0xd0, 0x8c, 0xb8, 0x0c, 0xd3, 0x82, 0x2b, 0x16,
	0x4a, 0x46, 0x5b, 0xa6, 0x7e, 0xf2, 0xf6, 0xe3, 0x27, 0x9d, 0x4f, 0x29, 0x53, 0x71, 0x11, 0x39,
	0x58, 0xa4, 0xee, 0x06, 0x48, 0xf5, 0xf3, 0xbe, 0x5c, 0x26, 0x2e, 0xce, 0xd7, 0x99, 0x12, 0x6e,
	0x42, 0xd6, 0x9a, 0xd3, 0x71, 0xff, 0xd6, 0xc7, 0xc7, 0x4e, 0xc0, 0xe8, 0x0a, 0xa9, 0x22, 0x27,
	0xfe, 0x5e, 0xc4, 0xe5, 0xb4, 0x7c, 0x34, 0x60, 0xf4, 0x13, 0xf3, 0xb7, 0xef, 0x3a, 0xc6, 0xd1,
	0x4f, 0x3b, 0xe0, 0x70, 0x6b, 0xde, 0x2f, 0x99, 0x8a, 0xa7, 0x44, 0x21, 0xf8, 0x01, 0x30, 0x71,
	0x92, 0x29, 0x3d, 0xf2, 0x5e, 0xff, 0x2d, 0x67, 0x0b, 0xaf, 0xb3, 0x55, 0xe3, 0x6b, 0x27, 0xfc,
	0x08, 0xd4, 0xa5, 0x42, 0xaa, 0x90, 0x1a, 0xc1, 0x41, 0xbf, 0xf3, 0x42, 0xcd, 0xf3, 0x82, 0x40,
	0xdb, 0xfc, 0x8d, 0x1d, 0x86, 0xa0, 0xec, 0x2c, 0x44, 0x94, 0xe6, 0x61, 0x96, 0x54, 0x30, 0xfe,
	0xed, 0xb4, 0x67, 0x45, 0xc4, 0x19, 0xbe, 0x4b, 0xd6, 0x7e, 0x23, 0xe2, 0xd2, 0xa3, 0x34, 0x3f,
	0x4b, 0xca, 0x1d, 0x66, 0xe2, 0x01, 0xc9, 0x43, 0x59, 0xa4, 0x1a, 0xa6, 0xe9, 0xdf, 0xd4, 0x42,
	0x50, 0xa4, 0x70, 0x00, 0x1a, 0x9c, 0x9d, 0x13, 0xbc, 0xc6, 0x9c, 0xb4, 0x6e, 0x74, 0x77, 0x7b,
	0x7b, 0xfd, 0x77, 0x5e, 0xd9, 0x39, 0x59, 0x64, 0x4b, 0xa4, 0x88, 0xff, 0xbc, 0x6c, 0x03, 0xf3,
	0x07, 0x03, 0x1c, 0xfe, 0xad, 0x15, 0x7e, 0x08, 0x6e, 0x94, 0xb3, 0x12, 0x4d, 0xf3, 0x1f, 0x90,
	0xa9, 0xdc, 0xf0, 0x6d, 0xb0, 0x1f, 0x71, 0x81, 0x93, 0x30, 0x26, 0x8c, 0xc6, 0x4a, 0x73, 0x35,
	0xcb, 0x35, 0x0a, 0x9c, 0xdc, 0xd1, 0x12, 0xbc, 0x0d, 0x40, 0x65, 0x29, 0xf3, 0xad, 0xd1, 0xed,
	0xf5, 0xdb, 0x4e, 0x15, 0x7e, 0xe7, 0x59, 0xf8, 0x9d, 0xf9, 0xb3, 0xf0, 0x0f, 0xcc, 0x87, 0xbf,
	0x74, 0x8c, 0x92, 0x8d, 0xc0, 0x49, 0xa9, 0x6e, 0x5a, 0x7f, 0x6a, 0x80, 0xfa, 0x80, 0xcb, 0x80,
	0xd1, 0xff, 0x33, 0xf0, 0x5f, 0x81, 0xd7, 0xca, 0x45, 0x97, 0x91, 0xde, 0xfd, 0x6f, 0x22, 0x5d,
	0x8f, 0xaa, 0xa6, 0xdf, 0x05, 0x07, 0x92, 0xd1, 0x15, 0xc9, 0x43, 0xb4, 0x5c, 0xe6, 0x44, 0x4a,
	0xbd, 0xe6, 0x86, 0xdf, 0xac, 0x54, 0xaf, 0x12, 0xf5, 0xb0, 0xb5, 0xf7, 0x9e, 0x1a, 0xc0, 0x7a,
	0x11, 0x39, 0x74, 0x40, 0x6b, 0x78, 0xf7, 0x6c, 0x1e, 0x06, 0x73, 0x6f, 0xbe, 0x08, 0x42, 0x6f,
	0x38, 0x5c, 0x4c, 0x17, 0x13, 0x6f, 0x3e, 0x9e, 0x7d, 0x6e, 0xd5, 0xda, 0xd6, 0xc5, 0x65, 0x77,
	0xdf, 0xc3, 0xb8, 0x48, 0x0b, 0x8e, 0x14, 0x5b, 0x51, 0x78, 0x04, 0xe0, 0x5f, 0xfd, 0xc1, 0xc8,
	0x9b, 0x8c, 0x4e, 0x2c, 0xa3, 0x0d, 0x2e, 0x2e, 0xbb, 0xf5, 0x80, 0x20, 0x4e, 0x96, 0xb0, 0x07,
	0x0e, 0xb7, 0x3c, 0x8b, 0xc1, 0x74, 0x3c, 0x9f, 0x8f, 0x4e, 0xac, 0x9d, 0x76, 0xf3, 0xe2, 0xb2,
	0xdb, 0x08, 0x8a, 0x28, 0x65, 0x4a, 0xbd, 0xec, 0x1c, 0x7e, 0x31, 0x3b, 0x1d, 0xfb, 0xd3, 0xd1,
	0x89, 0xb5, 0x5b, 0x39, 0x87, 0x62, 0x75, 0xce, 0xf2, 0xf4, 0x65, 0xe7, 0xe9, 0x78, 0xe6, 0x4d,
	0xc6, 0xf7, 0x46, 0x27, 0x96, 0x59, 0x39, 0x4f, 0xd9, 0x0a, 0x71, 0xf6, 0x0d, 0x59, 0xb6, 0xcd,
	0x6f, 0xbf, 0xb7, 0x6b, 0x83, 0xc1, 0x8f, 0x57, 0xb6, 0xf1, 0xe8, 0xca, 0x36, 0x7e, 0xbd, 0xb2,
	0x8d, 0x87, 0xd7, 0x76, 0xed, 0xd1, 0xb5, 0x5d, 0xfb, 0xf9, 0xda, 0xae, 0xdd, 0xeb, 0xbd, 0x12,
	0xfc, 0xd7, 0xfa, 0x9f, 0x56, 0xad, 0x33, 0x22, 0xa3, 0xba, 0x0e, 0xd2, 0xad, 0x3f, 0x02, 0x00,
	0x00, 0xff, 0xff, 0xa0, 0x57, 0x06, 0x7c, 0x84, 0x05, 0x00, 0x00,
}

func (this *RawCheckpoint) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RawCheckpoint)
	if !ok {
		that2, ok := that.(RawCheckpoint)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.EpochNum != that1.EpochNum {
		return false
	}
	if that1.LastCommitHash == nil {
		if this.LastCommitHash != nil {
			return false
		}
	} else if !this.LastCommitHash.Equal(*that1.LastCommitHash) {
		return false
	}
	if !bytes.Equal(this.Bitmap, that1.Bitmap) {
		return false
	}
	if that1.BlsMultiSig == nil {
		if this.BlsMultiSig != nil {
			return false
		}
	} else if !this.BlsMultiSig.Equal(*that1.BlsMultiSig) {
		return false
	}
	return true
}
func (this *RawCheckpointWithMeta) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RawCheckpointWithMeta)
	if !ok {
		that2, ok := that.(RawCheckpointWithMeta)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Ckpt.Equal(that1.Ckpt) {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if that1.BlsAggrPk == nil {
		if this.BlsAggrPk != nil {
			return false
		}
	} else if !this.BlsAggrPk.Equal(*that1.BlsAggrPk) {
		return false
	}
	if this.PowerSum != that1.PowerSum {
		return false
	}
	if len(this.Lifecycle) != len(that1.Lifecycle) {
		return false
	}
	for i := range this.Lifecycle {
		if !this.Lifecycle[i].Equal(that1.Lifecycle[i]) {
			return false
		}
	}
	return true
}
func (this *CheckpointStateUpdate) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CheckpointStateUpdate)
	if !ok {
		that2, ok := that.(CheckpointStateUpdate)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.State != that1.State {
		return false
	}
	if this.BlockHeight != that1.BlockHeight {
		return false
	}
	if that1.BlockTime == nil {
		if this.BlockTime != nil {
			return false
		}
	} else if !this.BlockTime.Equal(*that1.BlockTime) {
		return false
	}
	return true
}
func (m *RawCheckpoint) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RawCheckpoint) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RawCheckpoint) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BlsMultiSig != nil {
		{
			size := m.BlsMultiSig.Size()
			i -= size
			if _, err := m.BlsMultiSig.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintCheckpoint(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.Bitmap) > 0 {
		i -= len(m.Bitmap)
		copy(dAtA[i:], m.Bitmap)
		i = encodeVarintCheckpoint(dAtA, i, uint64(len(m.Bitmap)))
		i--
		dAtA[i] = 0x1a
	}
	if m.LastCommitHash != nil {
		{
			size := m.LastCommitHash.Size()
			i -= size
			if _, err := m.LastCommitHash.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintCheckpoint(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.EpochNum != 0 {
		i = encodeVarintCheckpoint(dAtA, i, uint64(m.EpochNum))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RawCheckpointWithMeta) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RawCheckpointWithMeta) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RawCheckpointWithMeta) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Lifecycle) > 0 {
		for iNdEx := len(m.Lifecycle) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Lifecycle[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCheckpoint(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.PowerSum != 0 {
		i = encodeVarintCheckpoint(dAtA, i, uint64(m.PowerSum))
		i--
		dAtA[i] = 0x20
	}
	if m.BlsAggrPk != nil {
		{
			size := m.BlsAggrPk.Size()
			i -= size
			if _, err := m.BlsAggrPk.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintCheckpoint(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Status != 0 {
		i = encodeVarintCheckpoint(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x10
	}
	if m.Ckpt != nil {
		{
			size, err := m.Ckpt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCheckpoint(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CheckpointStateUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckpointStateUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CheckpointStateUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BlockTime != nil {
		n2, err2 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(*m.BlockTime, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.BlockTime):])
		if err2 != nil {
			return 0, err2
		}
		i -= n2
		i = encodeVarintCheckpoint(dAtA, i, uint64(n2))
		i--
		dAtA[i] = 0x1a
	}
	if m.BlockHeight != 0 {
		i = encodeVarintCheckpoint(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x10
	}
	if m.State != 0 {
		i = encodeVarintCheckpoint(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BlsSig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlsSig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BlsSig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SignerAddress) > 0 {
		i -= len(m.SignerAddress)
		copy(dAtA[i:], m.SignerAddress)
		i = encodeVarintCheckpoint(dAtA, i, uint64(len(m.SignerAddress)))
		i--
		dAtA[i] = 0x22
	}
	if m.BlsSig != nil {
		{
			size := m.BlsSig.Size()
			i -= size
			if _, err := m.BlsSig.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintCheckpoint(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.LastCommitHash != nil {
		{
			size := m.LastCommitHash.Size()
			i -= size
			if _, err := m.LastCommitHash.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintCheckpoint(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.EpochNum != 0 {
		i = encodeVarintCheckpoint(dAtA, i, uint64(m.EpochNum))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintCheckpoint(dAtA []byte, offset int, v uint64) int {
	offset -= sovCheckpoint(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *RawCheckpoint) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EpochNum != 0 {
		n += 1 + sovCheckpoint(uint64(m.EpochNum))
	}
	if m.LastCommitHash != nil {
		l = m.LastCommitHash.Size()
		n += 1 + l + sovCheckpoint(uint64(l))
	}
	l = len(m.Bitmap)
	if l > 0 {
		n += 1 + l + sovCheckpoint(uint64(l))
	}
	if m.BlsMultiSig != nil {
		l = m.BlsMultiSig.Size()
		n += 1 + l + sovCheckpoint(uint64(l))
	}
	return n
}

func (m *RawCheckpointWithMeta) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ckpt != nil {
		l = m.Ckpt.Size()
		n += 1 + l + sovCheckpoint(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovCheckpoint(uint64(m.Status))
	}
	if m.BlsAggrPk != nil {
		l = m.BlsAggrPk.Size()
		n += 1 + l + sovCheckpoint(uint64(l))
	}
	if m.PowerSum != 0 {
		n += 1 + sovCheckpoint(uint64(m.PowerSum))
	}
	if len(m.Lifecycle) > 0 {
		for _, e := range m.Lifecycle {
			l = e.Size()
			n += 1 + l + sovCheckpoint(uint64(l))
		}
	}
	return n
}

func (m *CheckpointStateUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.State != 0 {
		n += 1 + sovCheckpoint(uint64(m.State))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovCheckpoint(uint64(m.BlockHeight))
	}
	if m.BlockTime != nil {
		l = github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.BlockTime)
		n += 1 + l + sovCheckpoint(uint64(l))
	}
	return n
}

func (m *BlsSig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EpochNum != 0 {
		n += 1 + sovCheckpoint(uint64(m.EpochNum))
	}
	if m.LastCommitHash != nil {
		l = m.LastCommitHash.Size()
		n += 1 + l + sovCheckpoint(uint64(l))
	}
	if m.BlsSig != nil {
		l = m.BlsSig.Size()
		n += 1 + l + sovCheckpoint(uint64(l))
	}
	l = len(m.SignerAddress)
	if l > 0 {
		n += 1 + l + sovCheckpoint(uint64(l))
	}
	return n
}

func sovCheckpoint(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCheckpoint(x uint64) (n int) {
	return sovCheckpoint(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RawCheckpoint) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCheckpoint
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RawCheckpoint: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RawCheckpoint: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochNum", wireType)
			}
			m.EpochNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckpoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EpochNum |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastCommitHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckpoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCheckpoint
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCheckpoint
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v LastCommitHash
			m.LastCommitHash = &v
			if err := m.LastCommitHash.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bitmap", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckpoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCheckpoint
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCheckpoint
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bitmap = append(m.Bitmap[:0], dAtA[iNdEx:postIndex]...)
			if m.Bitmap == nil {
				m.Bitmap = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlsMultiSig", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckpoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCheckpoint
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCheckpoint
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_cosmos_cosmos_sdk_crypto_keys_bls12381.Signature
			m.BlsMultiSig = &v
			if err := m.BlsMultiSig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCheckpoint(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCheckpoint
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RawCheckpointWithMeta) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCheckpoint
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RawCheckpointWithMeta: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RawCheckpointWithMeta: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ckpt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckpoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCheckpoint
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCheckpoint
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Ckpt == nil {
				m.Ckpt = &RawCheckpoint{}
			}
			if err := m.Ckpt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckpoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= CheckpointStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlsAggrPk", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckpoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCheckpoint
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCheckpoint
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_cosmos_cosmos_sdk_crypto_keys_bls12381.PublicKey
			m.BlsAggrPk = &v
			if err := m.BlsAggrPk.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PowerSum", wireType)
			}
			m.PowerSum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckpoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PowerSum |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lifecycle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckpoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCheckpoint
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCheckpoint
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Lifecycle = append(m.Lifecycle, &CheckpointStateUpdate{})
			if err := m.Lifecycle[len(m.Lifecycle)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCheckpoint(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCheckpoint
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckpointStateUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCheckpoint
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckpointStateUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckpointStateUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckpoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= CheckpointStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckpoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckpoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCheckpoint
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCheckpoint
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BlockTime == nil {
				m.BlockTime = new(time.Time)
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(m.BlockTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCheckpoint(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCheckpoint
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BlsSig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCheckpoint
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlsSig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlsSig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochNum", wireType)
			}
			m.EpochNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckpoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EpochNum |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastCommitHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckpoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCheckpoint
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCheckpoint
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v LastCommitHash
			m.LastCommitHash = &v
			if err := m.LastCommitHash.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlsSig", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckpoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCheckpoint
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCheckpoint
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_cosmos_cosmos_sdk_crypto_keys_bls12381.Signature
			m.BlsSig = &v
			if err := m.BlsSig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckpoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckpoint
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCheckpoint
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SignerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCheckpoint(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCheckpoint
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCheckpoint(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCheckpoint
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCheckpoint
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCheckpoint
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCheckpoint
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCheckpoint
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCheckpoint
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCheckpoint        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCheckpoint          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCheckpoint = fmt.Errorf("proto: unexpected end of group")
)
