// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cosmos/bls/v1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryRawCheckpointListRequest is the request type for the
// Query/RawCheckpoints RPC method.
type QueryRawCheckpointListRequest struct {
	// status defines the status of the raw checkpoints of the query
	Status CheckpointStatus `protobuf:"varint,1,opt,name=status,proto3,enum=cosmos.bls.v1.CheckpointStatus" json:"status,omitempty"`
	// pagination defines an optional pagination for the request.
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryRawCheckpointListRequest) Reset()         { *m = QueryRawCheckpointListRequest{} }
func (m *QueryRawCheckpointListRequest) String() string { return proto.CompactTextString(m) }
func (*QueryRawCheckpointListRequest) ProtoMessage()    {}
func (*QueryRawCheckpointListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3a689ef328eacdb9, []int{0}
}
func (m *QueryRawCheckpointListRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRawCheckpointListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRawCheckpointListRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRawCheckpointListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRawCheckpointListRequest.Merge(m, src)
}
func (m *QueryRawCheckpointListRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryRawCheckpointListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRawCheckpointListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRawCheckpointListRequest proto.InternalMessageInfo

func (m *QueryRawCheckpointListRequest) GetStatus() CheckpointStatus {
	if m != nil {
		return m.Status
	}
	return Accumulating
}

func (m *QueryRawCheckpointListRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryRawCheckpointListResponse is the response type for the
// Query/RawCheckpoints RPC method.
type QueryRawCheckpointListResponse struct {
	// the order is going from the newest to oldest based on the epoch number
	RawCheckpoints []*RawCheckpointWithMeta `protobuf:"bytes,1,rep,name=raw_checkpoints,json=rawCheckpoints,proto3" json:"raw_checkpoints,omitempty"`
	// pagination defines the pagination in the response.
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryRawCheckpointListResponse) Reset()         { *m = QueryRawCheckpointListResponse{} }
func (m *QueryRawCheckpointListResponse) String() string { return proto.CompactTextString(m) }
func (*QueryRawCheckpointListResponse) ProtoMessage()    {}
func (*QueryRawCheckpointListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3a689ef328eacdb9, []int{1}
}
func (m *QueryRawCheckpointListResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRawCheckpointListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRawCheckpointListResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRawCheckpointListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRawCheckpointListResponse.Merge(m, src)
}
func (m *QueryRawCheckpointListResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryRawCheckpointListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRawCheckpointListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRawCheckpointListResponse proto.InternalMessageInfo

func (m *QueryRawCheckpointListResponse) GetRawCheckpoints() []*RawCheckpointWithMeta {
	if m != nil {
		return m.RawCheckpoints
	}
	return nil
}

func (m *QueryRawCheckpointListResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryRawCheckpointRequest is the request type for the Query/RawCheckpoint
// RPC method.
type QueryRawCheckpointRequest struct {
	// epoch_num defines the epoch for the queried checkpoint
	EpochNum uint64 `protobuf:"varint,1,opt,name=epoch_num,json=epochNum,proto3" json:"epoch_num,omitempty"`
}

func (m *QueryRawCheckpointRequest) Reset()         { *m = QueryRawCheckpointRequest{} }
func (m *QueryRawCheckpointRequest) String() string { return proto.CompactTextString(m) }
func (*QueryRawCheckpointRequest) ProtoMessage()    {}
func (*QueryRawCheckpointRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3a689ef328eacdb9, []int{2}
}
func (m *QueryRawCheckpointRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRawCheckpointRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRawCheckpointRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRawCheckpointRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRawCheckpointRequest.Merge(m, src)
}
func (m *QueryRawCheckpointRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryRawCheckpointRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRawCheckpointRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRawCheckpointRequest proto.InternalMessageInfo

func (m *QueryRawCheckpointRequest) GetEpochNum() uint64 {
	if m != nil {
		return m.EpochNum
	}
	return 0
}

// QueryRawCheckpointResponse is the response type for the Query/RawCheckpoint
// RPC method.
type QueryRawCheckpointResponse struct {
	RawCheckpoint *RawCheckpointWithMeta `protobuf:"bytes,1,opt,name=raw_checkpoint,json=rawCheckpoint,proto3" json:"raw_checkpoint,omitempty"`
}

func (m *QueryRawCheckpointResponse) Reset()         { *m = QueryRawCheckpointResponse{} }
func (m *QueryRawCheckpointResponse) String() string { return proto.CompactTextString(m) }
func (*QueryRawCheckpointResponse) ProtoMessage()    {}
func (*QueryRawCheckpointResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3a689ef328eacdb9, []int{3}
}
func (m *QueryRawCheckpointResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRawCheckpointResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRawCheckpointResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRawCheckpointResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRawCheckpointResponse.Merge(m, src)
}
func (m *QueryRawCheckpointResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryRawCheckpointResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRawCheckpointResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRawCheckpointResponse proto.InternalMessageInfo

func (m *QueryRawCheckpointResponse) GetRawCheckpoint() *RawCheckpointWithMeta {
	if m != nil {
		return m.RawCheckpoint
	}
	return nil
}

// QueryRawCheckpointsRequest is the request type for the Query/RawCheckpoints
// RPC method.
type QueryRawCheckpointsRequest struct {
	// pagination defines whether to have the pagination in the request
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryRawCheckpointsRequest) Reset()         { *m = QueryRawCheckpointsRequest{} }
func (m *QueryRawCheckpointsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryRawCheckpointsRequest) ProtoMessage()    {}
func (*QueryRawCheckpointsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3a689ef328eacdb9, []int{4}
}
func (m *QueryRawCheckpointsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRawCheckpointsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRawCheckpointsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRawCheckpointsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRawCheckpointsRequest.Merge(m, src)
}
func (m *QueryRawCheckpointsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryRawCheckpointsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRawCheckpointsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRawCheckpointsRequest proto.InternalMessageInfo

func (m *QueryRawCheckpointsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryRawCheckpointsResponse is the response type for the Query/RawCheckpoints
// RPC method.
type QueryRawCheckpointsResponse struct {
	// the order is going from the newest to oldest based on the epoch number
	RawCheckpoints []*RawCheckpointWithMeta `protobuf:"bytes,1,rep,name=raw_checkpoints,json=rawCheckpoints,proto3" json:"raw_checkpoints,omitempty"`
	// pagination defines the pagination in the response.
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryRawCheckpointsResponse) Reset()         { *m = QueryRawCheckpointsResponse{} }
func (m *QueryRawCheckpointsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryRawCheckpointsResponse) ProtoMessage()    {}
func (*QueryRawCheckpointsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3a689ef328eacdb9, []int{5}
}
func (m *QueryRawCheckpointsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRawCheckpointsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRawCheckpointsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRawCheckpointsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRawCheckpointsResponse.Merge(m, src)
}
func (m *QueryRawCheckpointsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryRawCheckpointsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRawCheckpointsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRawCheckpointsResponse proto.InternalMessageInfo

func (m *QueryRawCheckpointsResponse) GetRawCheckpoints() []*RawCheckpointWithMeta {
	if m != nil {
		return m.RawCheckpoints
	}
	return nil
}

func (m *QueryRawCheckpointsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryBlsPublicKeyListRequest is the request type for the Query/BlsPublicKeys
// RPC method.
type QueryBlsPublicKeyListRequest struct {
	// epoch_num defines the epoch for the queried bls public keys
	EpochNum uint64 `protobuf:"varint,1,opt,name=epoch_num,json=epochNum,proto3" json:"epoch_num,omitempty"`
	// pagination defines an optional pagination for the request.
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryBlsPublicKeyListRequest) Reset()         { *m = QueryBlsPublicKeyListRequest{} }
func (m *QueryBlsPublicKeyListRequest) String() string { return proto.CompactTextString(m) }
func (*QueryBlsPublicKeyListRequest) ProtoMessage()    {}
func (*QueryBlsPublicKeyListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3a689ef328eacdb9, []int{6}
}
func (m *QueryBlsPublicKeyListRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBlsPublicKeyListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBlsPublicKeyListRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBlsPublicKeyListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBlsPublicKeyListRequest.Merge(m, src)
}
func (m *QueryBlsPublicKeyListRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryBlsPublicKeyListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBlsPublicKeyListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBlsPublicKeyListRequest proto.InternalMessageInfo

func (m *QueryBlsPublicKeyListRequest) GetEpochNum() uint64 {
	if m != nil {
		return m.EpochNum
	}
	return 0
}

func (m *QueryBlsPublicKeyListRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryBlsPublicKeyListResponse is the response type for the
// Query/BlsPublicKeys RPC method.
type QueryBlsPublicKeyListResponse struct {
	ValidatorWithBlsKeys []*ValidatorWithBlsKey `protobuf:"bytes,1,rep,name=validator_with_bls_keys,json=validatorWithBlsKeys,proto3" json:"validator_with_bls_keys,omitempty"`
	// pagination defines the pagination in the response.
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryBlsPublicKeyListResponse) Reset()         { *m = QueryBlsPublicKeyListResponse{} }
func (m *QueryBlsPublicKeyListResponse) String() string { return proto.CompactTextString(m) }
func (*QueryBlsPublicKeyListResponse) ProtoMessage()    {}
func (*QueryBlsPublicKeyListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3a689ef328eacdb9, []int{7}
}
func (m *QueryBlsPublicKeyListResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBlsPublicKeyListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBlsPublicKeyListResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBlsPublicKeyListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBlsPublicKeyListResponse.Merge(m, src)
}
func (m *QueryBlsPublicKeyListResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryBlsPublicKeyListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBlsPublicKeyListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBlsPublicKeyListResponse proto.InternalMessageInfo

func (m *QueryBlsPublicKeyListResponse) GetValidatorWithBlsKeys() []*ValidatorWithBlsKey {
	if m != nil {
		return m.ValidatorWithBlsKeys
	}
	return nil
}

func (m *QueryBlsPublicKeyListResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryEpochStatusRequest is the request type for the Query/EpochStatus
// RPC method.
type QueryEpochStatusRequest struct {
	EpochNum uint64 `protobuf:"varint,1,opt,name=epoch_num,json=epochNum,proto3" json:"epoch_num,omitempty"`
}

func (m *QueryEpochStatusRequest) Reset()         { *m = QueryEpochStatusRequest{} }
func (m *QueryEpochStatusRequest) String() string { return proto.CompactTextString(m) }
func (*QueryEpochStatusRequest) ProtoMessage()    {}
func (*QueryEpochStatusRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3a689ef328eacdb9, []int{8}
}
func (m *QueryEpochStatusRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryEpochStatusRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryEpochStatusRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryEpochStatusRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryEpochStatusRequest.Merge(m, src)
}
func (m *QueryEpochStatusRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryEpochStatusRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryEpochStatusRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryEpochStatusRequest proto.InternalMessageInfo

func (m *QueryEpochStatusRequest) GetEpochNum() uint64 {
	if m != nil {
		return m.EpochNum
	}
	return 0
}

// QueryEpochStatusResponse is the response type for the Query/EpochStatus
// RPC method.
type QueryEpochStatusResponse struct {
	Status CheckpointStatus `protobuf:"varint,1,opt,name=status,proto3,enum=cosmos.bls.v1.CheckpointStatus" json:"status,omitempty"`
}

func (m *QueryEpochStatusResponse) Reset()         { *m = QueryEpochStatusResponse{} }
func (m *QueryEpochStatusResponse) String() string { return proto.CompactTextString(m) }
func (*QueryEpochStatusResponse) ProtoMessage()    {}
func (*QueryEpochStatusResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3a689ef328eacdb9, []int{9}
}
func (m *QueryEpochStatusResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryEpochStatusResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryEpochStatusResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryEpochStatusResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryEpochStatusResponse.Merge(m, src)
}
func (m *QueryEpochStatusResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryEpochStatusResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryEpochStatusResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryEpochStatusResponse proto.InternalMessageInfo

func (m *QueryEpochStatusResponse) GetStatus() CheckpointStatus {
	if m != nil {
		return m.Status
	}
	return Accumulating
}

// QueryRecentEpochStatusCountRequest is the request type for the
// Query/EpochStatusCount RPC method.
type QueryRecentEpochStatusCountRequest struct {
	// epoch_count is the number of the most recent epochs to include in the
	// aggregation
	EpochCount uint64 `protobuf:"varint,1,opt,name=epoch_count,json=epochCount,proto3" json:"epoch_count,omitempty"`
}

func (m *QueryRecentEpochStatusCountRequest) Reset()         { *m = QueryRecentEpochStatusCountRequest{} }
func (m *QueryRecentEpochStatusCountRequest) String() string { return proto.CompactTextString(m) }
func (*QueryRecentEpochStatusCountRequest) ProtoMessage()    {}
func (*QueryRecentEpochStatusCountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3a689ef328eacdb9, []int{10}
}
func (m *QueryRecentEpochStatusCountRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRecentEpochStatusCountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRecentEpochStatusCountRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRecentEpochStatusCountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRecentEpochStatusCountRequest.Merge(m, src)
}
func (m *QueryRecentEpochStatusCountRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryRecentEpochStatusCountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRecentEpochStatusCountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRecentEpochStatusCountRequest proto.InternalMessageInfo

func (m *QueryRecentEpochStatusCountRequest) GetEpochCount() uint64 {
	if m != nil {
		return m.EpochCount
	}
	return 0
}

// QueryRecentEpochStatusCountResponse is the response type for the
// Query/EpochStatusCount RPC method.
type QueryRecentEpochStatusCountResponse struct {
	TipEpoch    uint64            `protobuf:"varint,1,opt,name=tip_epoch,json=tipEpoch,proto3" json:"tip_epoch,omitempty"`
	EpochCount  uint64            `protobuf:"varint,2,opt,name=epoch_count,json=epochCount,proto3" json:"epoch_count,omitempty"`
	StatusCount map[string]uint64 `protobuf:"bytes,3,rep,name=status_count,json=statusCount,proto3" json:"status_count,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (m *QueryRecentEpochStatusCountResponse) Reset()         { *m = QueryRecentEpochStatusCountResponse{} }
func (m *QueryRecentEpochStatusCountResponse) String() string { return proto.CompactTextString(m) }
func (*QueryRecentEpochStatusCountResponse) ProtoMessage()    {}
func (*QueryRecentEpochStatusCountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3a689ef328eacdb9, []int{11}
}
func (m *QueryRecentEpochStatusCountResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRecentEpochStatusCountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRecentEpochStatusCountResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRecentEpochStatusCountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRecentEpochStatusCountResponse.Merge(m, src)
}
func (m *QueryRecentEpochStatusCountResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryRecentEpochStatusCountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRecentEpochStatusCountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRecentEpochStatusCountResponse proto.InternalMessageInfo

func (m *QueryRecentEpochStatusCountResponse) GetTipEpoch() uint64 {
	if m != nil {
		return m.TipEpoch
	}
	return 0
}

func (m *QueryRecentEpochStatusCountResponse) GetEpochCount() uint64 {
	if m != nil {
		return m.EpochCount
	}
	return 0
}

func (m *QueryRecentEpochStatusCountResponse) GetStatusCount() map[string]uint64 {
	if m != nil {
		return m.StatusCount
	}
	return nil
}

// QueryLastCheckpointWithStatusRequest is the request type for the
// Query/LastCheckpointWithStatus RPC method.
type QueryLastCheckpointWithStatusRequest struct {
	Status CheckpointStatus `protobuf:"varint,1,opt,name=status,proto3,enum=cosmos.bls.v1.CheckpointStatus" json:"status,omitempty"`
}

func (m *QueryLastCheckpointWithStatusRequest) Reset()         { *m = QueryLastCheckpointWithStatusRequest{} }
func (m *QueryLastCheckpointWithStatusRequest) String() string { return proto.CompactTextString(m) }
func (*QueryLastCheckpointWithStatusRequest) ProtoMessage()    {}
func (*QueryLastCheckpointWithStatusRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3a689ef328eacdb9, []int{12}
}
func (m *QueryLastCheckpointWithStatusRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLastCheckpointWithStatusRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLastCheckpointWithStatusRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLastCheckpointWithStatusRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLastCheckpointWithStatusRequest.Merge(m, src)
}
func (m *QueryLastCheckpointWithStatusRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryLastCheckpointWithStatusRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLastCheckpointWithStatusRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLastCheckpointWithStatusRequest proto.InternalMessageInfo

func (m *QueryLastCheckpointWithStatusRequest) GetStatus() CheckpointStatus {
	if m != nil {
		return m.Status
	}
	return Accumulating
}

// QueryLastCheckpointWithStatusResponse is the response type for the
// Query/LastCheckpointWithStatus RPC method.
type QueryLastCheckpointWithStatusResponse struct {
	RawCheckpoint *RawCheckpoint `protobuf:"bytes,1,opt,name=raw_checkpoint,json=rawCheckpoint,proto3" json:"raw_checkpoint,omitempty"`
}

func (m *QueryLastCheckpointWithStatusResponse) Reset()         { *m = QueryLastCheckpointWithStatusResponse{} }
func (m *QueryLastCheckpointWithStatusResponse) String() string { return proto.CompactTextString(m) }
func (*QueryLastCheckpointWithStatusResponse) ProtoMessage()    {}
func (*QueryLastCheckpointWithStatusResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3a689ef328eacdb9, []int{13}
}
func (m *QueryLastCheckpointWithStatusResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLastCheckpointWithStatusResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLastCheckpointWithStatusResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLastCheckpointWithStatusResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLastCheckpointWithStatusResponse.Merge(m, src)
}
func (m *QueryLastCheckpointWithStatusResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLastCheckpointWithStatusResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLastCheckpointWithStatusResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLastCheckpointWithStatusResponse proto.InternalMessageInfo

func (m *QueryLastCheckpointWithStatusResponse) GetRawCheckpoint() *RawCheckpoint {
	if m != nil {
		return m.RawCheckpoint
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryRawCheckpointListRequest)(nil), "cosmos.bls.v1.QueryRawCheckpointListRequest")
	proto.RegisterType((*QueryRawCheckpointListResponse)(nil), "cosmos.bls.v1.QueryRawCheckpointListResponse")
	proto.RegisterType((*QueryRawCheckpointRequest)(nil), "cosmos.bls.v1.QueryRawCheckpointRequest")
	proto.RegisterType((*QueryRawCheckpointResponse)(nil), "cosmos.bls.v1.QueryRawCheckpointResponse")
	proto.RegisterType((*QueryRawCheckpointsRequest)(nil), "cosmos.bls.v1.QueryRawCheckpointsRequest")
	proto.RegisterType((*QueryRawCheckpointsResponse)(nil), "cosmos.bls.v1.QueryRawCheckpointsResponse")
	proto.RegisterType((*QueryBlsPublicKeyListRequest)(nil), "cosmos.bls.v1.QueryBlsPublicKeyListRequest")
	proto.RegisterType((*QueryBlsPublicKeyListResponse)(nil), "cosmos.bls.v1.QueryBlsPublicKeyListResponse")
	proto.RegisterType((*QueryEpochStatusRequest)(nil), "cosmos.bls.v1.QueryEpochStatusRequest")
	proto.RegisterType((*QueryEpochStatusResponse)(nil), "cosmos.bls.v1.QueryEpochStatusResponse")
	proto.RegisterType((*QueryRecentEpochStatusCountRequest)(nil), "cosmos.bls.v1.QueryRecentEpochStatusCountRequest")
	proto.RegisterType((*QueryRecentEpochStatusCountResponse)(nil), "cosmos.bls.v1.QueryRecentEpochStatusCountResponse")
	proto.RegisterMapType((map[string]uint64)(nil), "cosmos.bls.v1.QueryRecentEpochStatusCountResponse.StatusCountEntry")
	proto.RegisterType((*QueryLastCheckpointWithStatusRequest)(nil), "cosmos.bls.v1.QueryLastCheckpointWithStatusRequest")
	proto.RegisterType((*QueryLastCheckpointWithStatusResponse)(nil), "cosmos.bls.v1.QueryLastCheckpointWithStatusResponse")
}

func init() { proto.RegisterFile("cosmos/bls/v1/query.proto", fileDescriptor_3a689ef328eacdb9) }

var fileDescriptor_3a689ef328eacdb9 = []byte{
	// 917 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x96, 0xcf, 0x6f, 0xe3, 0x44,
	0x14, 0xc7, 0x3b, 0x29, 0xbb, 0xda, 0xbe, 0xd0, 0x50, 0x46, 0x2b, 0x36, 0xeb, 0x14, 0x6f, 0x65,
	0x4a, 0x9b, 0xa6, 0xad, 0x4d, 0x52, 0x04, 0xab, 0x3d, 0x70, 0x48, 0x54, 0x38, 0x74, 0x17, 0x2d,
	0x5e, 0x09, 0x04, 0x17, 0x6b, 0xe2, 0x0e, 0x89, 0x15, 0xc7, 0xf6, 0x66, 0xc6, 0x29, 0xd1, 0x6a,
	0x2f, 0x70, 0xe4, 0x40, 0x25, 0x0e, 0x5c, 0xe1, 0xcc, 0x19, 0x09, 0x71, 0xe5, 0xc2, 0xb1, 0x12,
	0x17, 0x8e, 0xa8, 0xe5, 0x9f, 0xe0, 0x86, 0x32, 0x1e, 0x37, 0xb1, 0xe3, 0xfc, 0x68, 0xd5, 0x03,
	0xa7, 0x36, 0x33, 0xef, 0xc7, 0xe7, 0xbd, 0xe7, 0xf7, 0xb5, 0xe1, 0xbe, 0xed, 0xb3, 0xae, 0xcf,
	0x8c, 0xa6, 0xcb, 0x8c, 0x7e, 0xd5, 0x78, 0x1e, 0xd2, 0xde, 0x40, 0x0f, 0x7a, 0x3e, 0xf7, 0xf1,
	0x6a, 0x74, 0xa5, 0x37, 0x5d, 0xa6, 0xf7, 0xab, 0x4a, 0x29, 0x69, 0xd9, 0x74, 0x99, 0xd5, 0xa1,
	0xd2, 0x56, 0xa9, 0xc4, 0x97, 0x84, 0xd1, 0x28, 0x88, 0xd1, 0xaf, 0x36, 0x29, 0x27, 0x55, 0x23,
	0x20, 0x2d, 0xc7, 0x23, 0xdc, 0xf1, 0x3d, 0x69, 0xbb, 0xde, 0xf2, 0xfd, 0x96, 0x4b, 0x0d, 0x12,
	0x38, 0x06, 0xf1, 0x3c, 0x9f, 0x8b, 0x4b, 0x26, 0x6f, 0xd5, 0x64, 0x1a, 0xbb, 0x4d, 0xed, 0x4e,
	0xe0, 0x3b, 0x1e, 0x8f, 0xee, 0xb5, 0x1f, 0x11, 0xbc, 0xf9, 0xc9, 0x30, 0x81, 0x49, 0x4e, 0x1a,
	0x97, 0x97, 0x8f, 0x1d, 0xc6, 0x4d, 0xfa, 0x3c, 0xa4, 0x8c, 0xe3, 0xf7, 0xe1, 0x36, 0xe3, 0x84,
	0x87, 0xac, 0x88, 0x36, 0x50, 0xb9, 0x50, 0x7b, 0xa0, 0x27, 0x0a, 0xd1, 0x47, 0x5e, 0xcf, 0x84,
	0x99, 0x29, 0xcd, 0xf1, 0x87, 0x00, 0x23, 0xd8, 0x62, 0x6e, 0x03, 0x95, 0xf3, 0xb5, 0xad, 0x4b,
	0x67, 0xc2, 0xa8, 0x1e, 0xb5, 0x47, 0x56, 0xa6, 0x3f, 0x25, 0x2d, 0x2a, 0x93, 0x9a, 0x63, 0x9e,
	0xda, 0xaf, 0x08, 0xd4, 0x69, 0x88, 0x2c, 0xf0, 0x3d, 0x46, 0xf1, 0x13, 0x78, 0xad, 0x47, 0x4e,
	0xac, 0x51, 0x75, 0x43, 0xd8, 0xe5, 0x72, 0xbe, 0xb6, 0x99, 0x82, 0x4d, 0x84, 0xf8, 0xcc, 0xe1,
	0xed, 0x27, 0x94, 0x13, 0xb3, 0xd0, 0x1b, 0x3f, 0x66, 0xf8, 0xa3, 0x0c, 0xf2, 0xed, 0xb9, 0xe4,
	0x11, 0x4b, 0x02, 0xfd, 0x21, 0xdc, 0x9f, 0x24, 0x8f, 0x1b, 0x5b, 0x82, 0x15, 0x1a, 0xf8, 0x76,
	0xdb, 0xf2, 0xc2, 0xae, 0xe8, 0xed, 0x2b, 0xe6, 0x1d, 0x71, 0xf0, 0x71, 0xd8, 0xd5, 0x1c, 0x50,
	0xb2, 0x3c, 0x65, 0xbd, 0x47, 0x50, 0x48, 0xd6, 0x2b, 0xfc, 0x17, 0x2d, 0x77, 0x35, 0x51, 0xae,
	0x76, 0x9c, 0x95, 0x8a, 0xc5, 0x94, 0xc9, 0x29, 0xa2, 0x6b, 0x4f, 0xf1, 0x17, 0x04, 0xa5, 0xcc,
	0x34, 0xff, 0xf3, 0x11, 0x7e, 0x83, 0x60, 0x5d, 0x70, 0xd7, 0x5d, 0xf6, 0x34, 0x6c, 0xba, 0x8e,
	0x7d, 0x44, 0x07, 0xe3, 0xfb, 0x31, 0x6b, 0x8c, 0x37, 0xb6, 0x03, 0xbf, 0xc7, 0x6b, 0x3a, 0x49,
	0x21, 0xfb, 0xf7, 0x39, 0xdc, 0xeb, 0x13, 0xd7, 0x39, 0x26, 0xdc, 0xef, 0x59, 0x27, 0x0e, 0x6f,
	0x5b, 0x52, 0x52, 0xe2, 0x3e, 0x6a, 0xa9, 0x3e, 0x7e, 0x1a, 0x5b, 0x0f, 0x7b, 0x58, 0x77, 0xd9,
	0x11, 0x1d, 0x98, 0x77, 0xfb, 0x93, 0x87, 0x37, 0xd8, 0xcb, 0xf7, 0xe0, 0x9e, 0x28, 0xe2, 0x70,
	0xd8, 0x1e, 0xa9, 0x16, 0x8b, 0x2c, 0xc3, 0x33, 0x28, 0x4e, 0xfa, 0xc9, 0xba, 0xaf, 0x2b, 0x4f,
	0xda, 0x21, 0x68, 0xd1, 0xf3, 0x48, 0x6d, 0xea, 0xf1, 0xb1, 0xd0, 0x0d, 0x3f, 0x1c, 0x2d, 0xe9,
	0x03, 0xc8, 0x47, 0x5c, 0xf6, 0xf0, 0x54, 0x92, 0x81, 0x38, 0x12, 0x76, 0xda, 0xb7, 0x39, 0x78,
	0x6b, 0x66, 0x1c, 0xc9, 0x59, 0x82, 0x15, 0xee, 0x04, 0x96, 0xf0, 0x8c, 0x0b, 0xe4, 0x4e, 0x20,
	0xec, 0xd3, 0x59, 0x72, 0xe9, 0x2c, 0xf8, 0x4b, 0x78, 0x35, 0xc2, 0x96, 0x16, 0xcb, 0x62, 0xa4,
	0x8d, 0x54, 0xad, 0x0b, 0x70, 0xe8, 0x63, 0x67, 0x87, 0x1e, 0xef, 0x0d, 0xcc, 0x3c, 0x1b, 0x9d,
	0x28, 0x1f, 0xc0, 0x5a, 0xda, 0x00, 0xaf, 0xc1, 0x72, 0x87, 0x0e, 0x04, 0xf3, 0x8a, 0x39, 0xfc,
	0x17, 0xdf, 0x85, 0x5b, 0x7d, 0xe2, 0x86, 0x54, 0x82, 0x46, 0x3f, 0x1e, 0xe5, 0x1e, 0x22, 0xcd,
	0x82, 0x4d, 0x01, 0xf1, 0x98, 0x30, 0x9e, 0xdc, 0xd2, 0xe4, 0xb8, 0xaf, 0x3d, 0x35, 0x17, 0xde,
	0x9e, 0x93, 0x40, 0xf6, 0xbb, 0x31, 0x45, 0x22, 0xd7, 0x67, 0xc9, 0x49, 0x4a, 0x1a, 0x6b, 0xff,
	0xde, 0x81, 0x5b, 0x22, 0x1d, 0xfe, 0x09, 0xc1, 0xeb, 0x13, 0xef, 0x1f, 0xbc, 0x97, 0x39, 0x80,
	0x29, 0x6f, 0x52, 0x65, 0x7f, 0x41, 0xeb, 0xa8, 0x02, 0xcd, 0xf8, 0xfa, 0xcf, 0x7f, 0xbe, 0xcf,
	0xed, 0xe0, 0x6d, 0x23, 0xf9, 0x0e, 0x4f, 0xc9, 0xa4, 0xf1, 0x22, 0x6a, 0xcd, 0x4b, 0xfc, 0x03,
	0x82, 0xd5, 0x44, 0x38, 0x5c, 0x9e, 0x9b, 0x31, 0x66, 0xdb, 0x59, 0xc0, 0x52, 0x72, 0x55, 0x05,
	0xd7, 0x2e, 0xde, 0x99, 0xc9, 0x65, 0xbc, 0xb8, 0xdc, 0xe7, 0x97, 0xf8, 0x3b, 0x04, 0x85, 0xa4,
	0xee, 0xe3, 0xf9, 0x09, 0xe3, 0x87, 0x45, 0xa9, 0x2c, 0x62, 0x2a, 0xe1, 0xb6, 0x04, 0xdc, 0x06,
	0x56, 0x67, 0x37, 0x6d, 0x38, 0xcf, 0xb5, 0xb4, 0x96, 0xe2, 0xdd, 0xac, 0x44, 0x53, 0x74, 0x5f,
	0xd9, 0x5b, 0xcc, 0x58, 0x72, 0xd5, 0x04, 0xd7, 0x1e, 0xae, 0x18, 0x93, 0xdf, 0x7d, 0x81, 0xf0,
	0x10, 0x5a, 0x9d, 0xe8, 0xda, 0x29, 0x82, 0xfc, 0xd8, 0x1e, 0xe3, 0xad, 0xac, 0x8c, 0x93, 0x5a,
	0xaa, 0x6c, 0xcf, 0xb5, 0x93, 0x50, 0xef, 0x08, 0xa8, 0x0a, 0x2e, 0xa7, 0xa0, 0x04, 0x43, 0x82,
	0xc5, 0x90, 0xdf, 0x74, 0x3f, 0x23, 0x78, 0x23, 0x5b, 0x60, 0x70, 0xf5, 0x2a, 0x62, 0x14, 0x81,
	0xd6, 0xae, 0xae, 0x5f, 0x5a, 0x45, 0x30, 0x6f, 0x62, 0x2d, 0x93, 0xf9, 0xd1, 0xb8, 0x4a, 0xe2,
	0xdf, 0x10, 0x14, 0xa7, 0x09, 0x05, 0x3e, 0xc8, 0x4a, 0x3e, 0x47, 0xb7, 0x94, 0x77, 0xaf, 0xe6,
	0x24, 0x99, 0x0f, 0x04, 0xf3, 0x3e, 0xde, 0x4d, 0x31, 0xbb, 0x84, 0x71, 0x2b, 0xbd, 0x36, 0x72,
	0x9b, 0xeb, 0xf5, 0x3f, 0xce, 0x55, 0x74, 0x76, 0xae, 0xa2, 0xbf, 0xcf, 0x55, 0x74, 0x7a, 0xa1,
	0x2e, 0x9d, 0x5d, 0xa8, 0x4b, 0x7f, 0x5d, 0xa8, 0x4b, 0x5f, 0x94, 0x5b, 0x0e, 0x6f, 0x87, 0x4d,
	0xdd, 0xf6, 0xbb, 0x71, 0xc0, 0xe8, 0xcf, 0x3e, 0x3b, 0xee, 0x18, 0x5f, 0x89, 0xe8, 0x7c, 0x10,
	0x50, 0xd6, 0xbc, 0x2d, 0x3e, 0xf2, 0x0f, 0xfe, 0x0b, 0x00, 0x00, 0xff, 0xff, 0x2a, 0x6f, 0x25,
	0xfe, 0x97, 0x0c, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// RawCheckpointList queries all checkpoints that match the given status.
	RawCheckpointList(ctx context.Context, in *QueryRawCheckpointListRequest, opts ...grpc.CallOption) (*QueryRawCheckpointListResponse, error)
	// RawCheckpoint queries a checkpoints at a given epoch number.
	RawCheckpoint(ctx context.Context, in *QueryRawCheckpointRequest, opts ...grpc.CallOption) (*QueryRawCheckpointResponse, error)
	// RawCheckpoints queries checkpoints for a epoch range specified in pagination params.
	RawCheckpoints(ctx context.Context, in *QueryRawCheckpointsRequest, opts ...grpc.CallOption) (*QueryRawCheckpointsResponse, error)
	// BlsPublicKeyList queries a list of bls public keys of the validators at a
	// given epoch number.
	BlsPublicKeyList(ctx context.Context, in *QueryBlsPublicKeyListRequest, opts ...grpc.CallOption) (*QueryBlsPublicKeyListResponse, error)
	// EpochStatus queries the status of the checkpoint at a given epoch
	EpochStatus(ctx context.Context, in *QueryEpochStatusRequest, opts ...grpc.CallOption) (*QueryEpochStatusResponse, error)
	// RecentEpochStatusCount queries the number of epochs with each status in
	// recent epochs
	RecentEpochStatusCount(ctx context.Context, in *QueryRecentEpochStatusCountRequest, opts ...grpc.CallOption) (*QueryRecentEpochStatusCountResponse, error)
	// LastCheckpointWithStatus queries the last checkpoint with a given status or
	// a more matured status
	LastCheckpointWithStatus(ctx context.Context, in *QueryLastCheckpointWithStatusRequest, opts ...grpc.CallOption) (*QueryLastCheckpointWithStatusResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) RawCheckpointList(ctx context.Context, in *QueryRawCheckpointListRequest, opts ...grpc.CallOption) (*QueryRawCheckpointListResponse, error) {
	out := new(QueryRawCheckpointListResponse)
	err := c.cc.Invoke(ctx, "/cosmos.bls.v1.Query/RawCheckpointList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RawCheckpoint(ctx context.Context, in *QueryRawCheckpointRequest, opts ...grpc.CallOption) (*QueryRawCheckpointResponse, error) {
	out := new(QueryRawCheckpointResponse)
	err := c.cc.Invoke(ctx, "/cosmos.bls.v1.Query/RawCheckpoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RawCheckpoints(ctx context.Context, in *QueryRawCheckpointsRequest, opts ...grpc.CallOption) (*QueryRawCheckpointsResponse, error) {
	out := new(QueryRawCheckpointsResponse)
	err := c.cc.Invoke(ctx, "/cosmos.bls.v1.Query/RawCheckpoints", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) BlsPublicKeyList(ctx context.Context, in *QueryBlsPublicKeyListRequest, opts ...grpc.CallOption) (*QueryBlsPublicKeyListResponse, error) {
	out := new(QueryBlsPublicKeyListResponse)
	err := c.cc.Invoke(ctx, "/cosmos.bls.v1.Query/BlsPublicKeyList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) EpochStatus(ctx context.Context, in *QueryEpochStatusRequest, opts ...grpc.CallOption) (*QueryEpochStatusResponse, error) {
	out := new(QueryEpochStatusResponse)
	err := c.cc.Invoke(ctx, "/cosmos.bls.v1.Query/EpochStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RecentEpochStatusCount(ctx context.Context, in *QueryRecentEpochStatusCountRequest, opts ...grpc.CallOption) (*QueryRecentEpochStatusCountResponse, error) {
	out := new(QueryRecentEpochStatusCountResponse)
	err := c.cc.Invoke(ctx, "/cosmos.bls.v1.Query/RecentEpochStatusCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LastCheckpointWithStatus(ctx context.Context, in *QueryLastCheckpointWithStatusRequest, opts ...grpc.CallOption) (*QueryLastCheckpointWithStatusResponse, error) {
	out := new(QueryLastCheckpointWithStatusResponse)
	err := c.cc.Invoke(ctx, "/cosmos.bls.v1.Query/LastCheckpointWithStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// RawCheckpointList queries all checkpoints that match the given status.
	RawCheckpointList(context.Context, *QueryRawCheckpointListRequest) (*QueryRawCheckpointListResponse, error)
	// RawCheckpoint queries a checkpoints at a given epoch number.
	RawCheckpoint(context.Context, *QueryRawCheckpointRequest) (*QueryRawCheckpointResponse, error)
	// RawCheckpoints queries checkpoints for a epoch range specified in pagination params.
	RawCheckpoints(context.Context, *QueryRawCheckpointsRequest) (*QueryRawCheckpointsResponse, error)
	// BlsPublicKeyList queries a list of bls public keys of the validators at a
	// given epoch number.
	BlsPublicKeyList(context.Context, *QueryBlsPublicKeyListRequest) (*QueryBlsPublicKeyListResponse, error)
	// EpochStatus queries the status of the checkpoint at a given epoch
	EpochStatus(context.Context, *QueryEpochStatusRequest) (*QueryEpochStatusResponse, error)
	// RecentEpochStatusCount queries the number of epochs with each status in
	// recent epochs
	RecentEpochStatusCount(context.Context, *QueryRecentEpochStatusCountRequest) (*QueryRecentEpochStatusCountResponse, error)
	// LastCheckpointWithStatus queries the last checkpoint with a given status or
	// a more matured status
	LastCheckpointWithStatus(context.Context, *QueryLastCheckpointWithStatusRequest) (*QueryLastCheckpointWithStatusResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) RawCheckpointList(ctx context.Context, req *QueryRawCheckpointListRequest) (*QueryRawCheckpointListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RawCheckpointList not implemented")
}
func (*UnimplementedQueryServer) RawCheckpoint(ctx context.Context, req *QueryRawCheckpointRequest) (*QueryRawCheckpointResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RawCheckpoint not implemented")
}
func (*UnimplementedQueryServer) RawCheckpoints(ctx context.Context, req *QueryRawCheckpointsRequest) (*QueryRawCheckpointsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RawCheckpoints not implemented")
}
func (*UnimplementedQueryServer) BlsPublicKeyList(ctx context.Context, req *QueryBlsPublicKeyListRequest) (*QueryBlsPublicKeyListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlsPublicKeyList not implemented")
}
func (*UnimplementedQueryServer) EpochStatus(ctx context.Context, req *QueryEpochStatusRequest) (*QueryEpochStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EpochStatus not implemented")
}
func (*UnimplementedQueryServer) RecentEpochStatusCount(ctx context.Context, req *QueryRecentEpochStatusCountRequest) (*QueryRecentEpochStatusCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecentEpochStatusCount not implemented")
}
func (*UnimplementedQueryServer) LastCheckpointWithStatus(ctx context.Context, req *QueryLastCheckpointWithStatusRequest) (*QueryLastCheckpointWithStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LastCheckpointWithStatus not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_RawCheckpointList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRawCheckpointListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RawCheckpointList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cosmos.bls.v1.Query/RawCheckpointList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RawCheckpointList(ctx, req.(*QueryRawCheckpointListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RawCheckpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRawCheckpointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RawCheckpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cosmos.bls.v1.Query/RawCheckpoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RawCheckpoint(ctx, req.(*QueryRawCheckpointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RawCheckpoints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRawCheckpointsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RawCheckpoints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cosmos.bls.v1.Query/RawCheckpoints",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RawCheckpoints(ctx, req.(*QueryRawCheckpointsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_BlsPublicKeyList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBlsPublicKeyListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).BlsPublicKeyList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cosmos.bls.v1.Query/BlsPublicKeyList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).BlsPublicKeyList(ctx, req.(*QueryBlsPublicKeyListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_EpochStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryEpochStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).EpochStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cosmos.bls.v1.Query/EpochStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).EpochStatus(ctx, req.(*QueryEpochStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RecentEpochStatusCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRecentEpochStatusCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RecentEpochStatusCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cosmos.bls.v1.Query/RecentEpochStatusCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RecentEpochStatusCount(ctx, req.(*QueryRecentEpochStatusCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LastCheckpointWithStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLastCheckpointWithStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LastCheckpointWithStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cosmos.bls.v1.Query/LastCheckpointWithStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LastCheckpointWithStatus(ctx, req.(*QueryLastCheckpointWithStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cosmos.bls.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RawCheckpointList",
			Handler:    _Query_RawCheckpointList_Handler,
		},
		{
			MethodName: "RawCheckpoint",
			Handler:    _Query_RawCheckpoint_Handler,
		},
		{
			MethodName: "RawCheckpoints",
			Handler:    _Query_RawCheckpoints_Handler,
		},
		{
			MethodName: "BlsPublicKeyList",
			Handler:    _Query_BlsPublicKeyList_Handler,
		},
		{
			MethodName: "EpochStatus",
			Handler:    _Query_EpochStatus_Handler,
		},
		{
			MethodName: "RecentEpochStatusCount",
			Handler:    _Query_RecentEpochStatusCount_Handler,
		},
		{
			MethodName: "LastCheckpointWithStatus",
			Handler:    _Query_LastCheckpointWithStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cosmos/bls/v1/query.proto",
}

func (m *QueryRawCheckpointListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRawCheckpointListRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRawCheckpointListRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Status != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryRawCheckpointListResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRawCheckpointListResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRawCheckpointListResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.RawCheckpoints) > 0 {
		for iNdEx := len(m.RawCheckpoints) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RawCheckpoints[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryRawCheckpointRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRawCheckpointRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRawCheckpointRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EpochNum != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.EpochNum))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryRawCheckpointResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRawCheckpointResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRawCheckpointResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RawCheckpoint != nil {
		{
			size, err := m.RawCheckpoint.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryRawCheckpointsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRawCheckpointsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRawCheckpointsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryRawCheckpointsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRawCheckpointsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRawCheckpointsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.RawCheckpoints) > 0 {
		for iNdEx := len(m.RawCheckpoints) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RawCheckpoints[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryBlsPublicKeyListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBlsPublicKeyListRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBlsPublicKeyListRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.EpochNum != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.EpochNum))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryBlsPublicKeyListResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBlsPublicKeyListResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBlsPublicKeyListResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ValidatorWithBlsKeys) > 0 {
		for iNdEx := len(m.ValidatorWithBlsKeys) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ValidatorWithBlsKeys[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryEpochStatusRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryEpochStatusRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryEpochStatusRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EpochNum != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.EpochNum))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryEpochStatusResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryEpochStatusResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryEpochStatusResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryRecentEpochStatusCountRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRecentEpochStatusCountRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRecentEpochStatusCountRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EpochCount != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.EpochCount))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryRecentEpochStatusCountResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRecentEpochStatusCountResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRecentEpochStatusCountResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.StatusCount) > 0 {
		for k := range m.StatusCount {
			v := m.StatusCount[k]
			baseI := i
			i = encodeVarintQuery(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintQuery(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintQuery(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.EpochCount != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.EpochCount))
		i--
		dAtA[i] = 0x10
	}
	if m.TipEpoch != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TipEpoch))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryLastCheckpointWithStatusRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLastCheckpointWithStatusRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLastCheckpointWithStatusRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryLastCheckpointWithStatusResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLastCheckpointWithStatusResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLastCheckpointWithStatusResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RawCheckpoint != nil {
		{
			size, err := m.RawCheckpoint.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryRawCheckpointListRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovQuery(uint64(m.Status))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryRawCheckpointListResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.RawCheckpoints) > 0 {
		for _, e := range m.RawCheckpoints {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryRawCheckpointRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EpochNum != 0 {
		n += 1 + sovQuery(uint64(m.EpochNum))
	}
	return n
}

func (m *QueryRawCheckpointResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RawCheckpoint != nil {
		l = m.RawCheckpoint.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryRawCheckpointsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryRawCheckpointsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.RawCheckpoints) > 0 {
		for _, e := range m.RawCheckpoints {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryBlsPublicKeyListRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EpochNum != 0 {
		n += 1 + sovQuery(uint64(m.EpochNum))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryBlsPublicKeyListResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ValidatorWithBlsKeys) > 0 {
		for _, e := range m.ValidatorWithBlsKeys {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryEpochStatusRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EpochNum != 0 {
		n += 1 + sovQuery(uint64(m.EpochNum))
	}
	return n
}

func (m *QueryEpochStatusResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovQuery(uint64(m.Status))
	}
	return n
}

func (m *QueryRecentEpochStatusCountRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EpochCount != 0 {
		n += 1 + sovQuery(uint64(m.EpochCount))
	}
	return n
}

func (m *QueryRecentEpochStatusCountResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TipEpoch != 0 {
		n += 1 + sovQuery(uint64(m.TipEpoch))
	}
	if m.EpochCount != 0 {
		n += 1 + sovQuery(uint64(m.EpochCount))
	}
	if len(m.StatusCount) > 0 {
		for k, v := range m.StatusCount {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovQuery(uint64(len(k))) + 1 + sovQuery(uint64(v))
			n += mapEntrySize + 1 + sovQuery(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *QueryLastCheckpointWithStatusRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovQuery(uint64(m.Status))
	}
	return n
}

func (m *QueryLastCheckpointWithStatusResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RawCheckpoint != nil {
		l = m.RawCheckpoint.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryRawCheckpointListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRawCheckpointListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRawCheckpointListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= CheckpointStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRawCheckpointListResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRawCheckpointListResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRawCheckpointListResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RawCheckpoints", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RawCheckpoints = append(m.RawCheckpoints, &RawCheckpointWithMeta{})
			if err := m.RawCheckpoints[len(m.RawCheckpoints)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRawCheckpointRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRawCheckpointRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRawCheckpointRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochNum", wireType)
			}
			m.EpochNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EpochNum |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRawCheckpointResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRawCheckpointResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRawCheckpointResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RawCheckpoint", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RawCheckpoint == nil {
				m.RawCheckpoint = &RawCheckpointWithMeta{}
			}
			if err := m.RawCheckpoint.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRawCheckpointsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRawCheckpointsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRawCheckpointsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRawCheckpointsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRawCheckpointsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRawCheckpointsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RawCheckpoints", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RawCheckpoints = append(m.RawCheckpoints, &RawCheckpointWithMeta{})
			if err := m.RawCheckpoints[len(m.RawCheckpoints)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBlsPublicKeyListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBlsPublicKeyListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBlsPublicKeyListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochNum", wireType)
			}
			m.EpochNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EpochNum |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBlsPublicKeyListResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBlsPublicKeyListResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBlsPublicKeyListResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorWithBlsKeys", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorWithBlsKeys = append(m.ValidatorWithBlsKeys, &ValidatorWithBlsKey{})
			if err := m.ValidatorWithBlsKeys[len(m.ValidatorWithBlsKeys)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryEpochStatusRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryEpochStatusRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryEpochStatusRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochNum", wireType)
			}
			m.EpochNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EpochNum |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryEpochStatusResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryEpochStatusResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryEpochStatusResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= CheckpointStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRecentEpochStatusCountRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRecentEpochStatusCountRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRecentEpochStatusCountRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochCount", wireType)
			}
			m.EpochCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EpochCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRecentEpochStatusCountResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRecentEpochStatusCountResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRecentEpochStatusCountResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TipEpoch", wireType)
			}
			m.TipEpoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TipEpoch |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochCount", wireType)
			}
			m.EpochCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EpochCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatusCount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StatusCount == nil {
				m.StatusCount = make(map[string]uint64)
			}
			var mapkey string
			var mapvalue uint64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQuery
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowQuery
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthQuery
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthQuery
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowQuery
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipQuery(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthQuery
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.StatusCount[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLastCheckpointWithStatusRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLastCheckpointWithStatusRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLastCheckpointWithStatusRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= CheckpointStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLastCheckpointWithStatusResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLastCheckpointWithStatusResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLastCheckpointWithStatusResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RawCheckpoint", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RawCheckpoint == nil {
				m.RawCheckpoint = &RawCheckpoint{}
			}
			if err := m.RawCheckpoint.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
