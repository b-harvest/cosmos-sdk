syntax = "proto3";
package cosmos.farming.v1beta1;

import "gogoproto/gogo.proto";
import "cosmos_proto/cosmos.proto";
import "cosmos/base/v1beta1/coin.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";

option go_package = "github.com/cosmos/cosmos-sdk/x/farming";

// Msg defines the feegrant Msg service.
service Msg {
  // CreateFixedAmountPlan defines a method for creating a new fixed amount farming plan
  rpc CreateFixedAmountPlan(MsgCreateFixedAmountPlan) returns (MsgCreateFixedAmountPlanResponse);

  // CreateRatioPlan defines a method for creating a new ratio farming plan
  rpc CreateRatioPlan(MsgCreateRatioPlan) returns (MsgCreateRatioPlanResponse);

  // Stake defines a method for staking coins into the farming plan
  rpc Stake(MsgStake) returns (MsgStakeResponse);

  // Unstake defines a method for unstaking coins from the farming plan
  rpc Unstake(MsgUnstake) returns (MsgUnstakeResponse);
  
  // Claim defines a method for claiming farming rewards
  rpc Claim(MsgClaim) returns (MsgClaimResponse);
}


// MsgCreateFixedAmountPlan defines a SDK message for creating a new fixed amount farming plan.
message MsgCreateFixedAmountPlan {
  // farming_pool_address defines the bech32-encoded address of the farming pool
  string farming_pool_address = 1; 

  // staking_coins_weight specifies coins weight for the plan
  repeated cosmos.base.v1beta1.DecCoin staking_coins_weight = 2 [
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.DecCoins", 
    (gogoproto.nullable) = false
  ];

  // start_time specifies the start time of the plan
  google.protobuf.Timestamp start_time = 3 [(gogoproto.stdtime) = true];

  // end_time specifis the end time of the plan
  google.protobuf.Timestamp end_time = 4 [(gogoproto.stdtime) = true];

  // epoch_days specifis a period of time that triggers the distribution plan; it is measured in days
  uint32 epoch_days = 5;

  // epoch_amount specifies the distributing amount for each epoch
  repeated cosmos.base.v1beta1.Coin epoch_amount = 6 [
      (gogoproto.moretags)   = "yaml:\"epoch_amount\"",
      (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins",
      (gogoproto.nullable) = false
  ];
}

// MsgCreateRatioPlan defines a SDK message for creating a new ratio farming plan.
message MsgCreateRatioPlan {
  // farming_pool_address defines the bech32-encoded address of the farming pool
  string farming_pool_address = 1; 

  // staking_coins_weight specifies coins weight for the plan
  repeated cosmos.base.v1beta1.DecCoin staking_coins_weight = 2 [
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.DecCoins", 
    (gogoproto.nullable) = false
  ];

  // start_time specifies the start time of the plan
  google.protobuf.Timestamp start_time = 3 [(gogoproto.stdtime) = true];

  // end_time specifis the end time of the plan
  google.protobuf.Timestamp end_time = 4 [(gogoproto.stdtime) = true];

  // epoch_days specifis a period of time that triggers the distribution plan; it is measured in days
  uint32 epoch_days = 5;

  // epoch_ratio specifies the distributing amount by ratio
  string epoch_ratio = 6 [
    (gogoproto.moretags)   = "yaml:\"epoch_ratio\"",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable)   = false
  ];
}

// MsgStake defines a SDK message for staking coins into the farming plan.
message MsgStake {
  // plan_id specifies the farming plan id
  uint64 plan_id = 1;

  // farmer defines the bech32-encoded address of the farmer 
  string farmer = 2;

  // staking_coins_weight specifies coins weight for the plan
  repeated cosmos.base.v1beta1.DecCoin staking_coins_weight = 2 [
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.DecCoins", 
    (gogoproto.nullable) = false
  ];
}

// MsgUnstake defines a SDK message for performing unstaking of coins from the farming plan.
message MsgUnstake {
  // plan_id specifies the farming plan id
  uint64 plan_id = 1;

  // farmer defines the bech32-encoded address of the farmer 
  string farmer = 2;

  // staking_coins_weight specifies coins weight for the plan
  repeated cosmos.base.v1beta1.DecCoin staking_coins_weight = 2 [
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.DecCoins", 
    (gogoproto.nullable) = false
  ];
}

// MsgClaim defines a SDK message for claiming rewards from the farming plan. 
message MsgClaim {
  // plan_id specifies the farming plan id
  uint64 plan_id = 1;

  // farmer defines the bech32-encoded address of the farmer 
  string farmer = 2;
}

// MsgCreateFixedAmountPlanResponse defines the Msg/CreateFixedAmountPlanResponse response type.
message MsgCreateFixedAmountPlanResponse {}

// MsgCreateRatioPlanResponse  defines the Msg/MsgCreateRatioPlanResponse  response type.
message MsgCreateRatioPlanResponse  {}

// MsgStakeResponse  defines the Msg/MsgStakeResponse response type.
message MsgStakeResponse  {}

// MsgUnstakeResponse defines the Msg/MsgUnstakeResponse response type.
message MsgUnstakeResponse {}

// MsgClaimResponse defines the Msg/MsgClaimResponse response type.
message MsgClaimResponse {}

