// Code generated by protoc-gen-go-pulsar. DO NOT EDIT.
package blsv1

import (
	_ "cosmossdk.io/api/amino"
	_ "cosmossdk.io/api/cosmos/msg/v1"
	fmt "fmt"
	runtime "github.com/cosmos/cosmos-proto/runtime"
	_ "github.com/cosmos/gogoproto/gogoproto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoiface "google.golang.org/protobuf/runtime/protoiface"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	reflect "reflect"
	sync "sync"
)

var (
	md_RawCheckpoint                  protoreflect.MessageDescriptor
	fd_RawCheckpoint_epoch_num        protoreflect.FieldDescriptor
	fd_RawCheckpoint_last_commit_hash protoreflect.FieldDescriptor
	fd_RawCheckpoint_bitmap           protoreflect.FieldDescriptor
	fd_RawCheckpoint_bls_multi_sig    protoreflect.FieldDescriptor
)

func init() {
	file_cosmos_bls_v1_checkpoint_proto_init()
	md_RawCheckpoint = File_cosmos_bls_v1_checkpoint_proto.Messages().ByName("RawCheckpoint")
	fd_RawCheckpoint_epoch_num = md_RawCheckpoint.Fields().ByName("epoch_num")
	fd_RawCheckpoint_last_commit_hash = md_RawCheckpoint.Fields().ByName("last_commit_hash")
	fd_RawCheckpoint_bitmap = md_RawCheckpoint.Fields().ByName("bitmap")
	fd_RawCheckpoint_bls_multi_sig = md_RawCheckpoint.Fields().ByName("bls_multi_sig")
}

var _ protoreflect.Message = (*fastReflection_RawCheckpoint)(nil)

type fastReflection_RawCheckpoint RawCheckpoint

func (x *RawCheckpoint) ProtoReflect() protoreflect.Message {
	return (*fastReflection_RawCheckpoint)(x)
}

func (x *RawCheckpoint) slowProtoReflect() protoreflect.Message {
	mi := &file_cosmos_bls_v1_checkpoint_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_RawCheckpoint_messageType fastReflection_RawCheckpoint_messageType
var _ protoreflect.MessageType = fastReflection_RawCheckpoint_messageType{}

type fastReflection_RawCheckpoint_messageType struct{}

func (x fastReflection_RawCheckpoint_messageType) Zero() protoreflect.Message {
	return (*fastReflection_RawCheckpoint)(nil)
}
func (x fastReflection_RawCheckpoint_messageType) New() protoreflect.Message {
	return new(fastReflection_RawCheckpoint)
}
func (x fastReflection_RawCheckpoint_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_RawCheckpoint
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_RawCheckpoint) Descriptor() protoreflect.MessageDescriptor {
	return md_RawCheckpoint
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_RawCheckpoint) Type() protoreflect.MessageType {
	return _fastReflection_RawCheckpoint_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_RawCheckpoint) New() protoreflect.Message {
	return new(fastReflection_RawCheckpoint)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_RawCheckpoint) Interface() protoreflect.ProtoMessage {
	return (*RawCheckpoint)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_RawCheckpoint) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.EpochNum != uint64(0) {
		value := protoreflect.ValueOfUint64(x.EpochNum)
		if !f(fd_RawCheckpoint_epoch_num, value) {
			return
		}
	}
	if len(x.LastCommitHash) != 0 {
		value := protoreflect.ValueOfBytes(x.LastCommitHash)
		if !f(fd_RawCheckpoint_last_commit_hash, value) {
			return
		}
	}
	if len(x.Bitmap) != 0 {
		value := protoreflect.ValueOfBytes(x.Bitmap)
		if !f(fd_RawCheckpoint_bitmap, value) {
			return
		}
	}
	if len(x.BlsMultiSig) != 0 {
		value := protoreflect.ValueOfBytes(x.BlsMultiSig)
		if !f(fd_RawCheckpoint_bls_multi_sig, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_RawCheckpoint) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "cosmos.bls.v1.RawCheckpoint.epoch_num":
		return x.EpochNum != uint64(0)
	case "cosmos.bls.v1.RawCheckpoint.last_commit_hash":
		return len(x.LastCommitHash) != 0
	case "cosmos.bls.v1.RawCheckpoint.bitmap":
		return len(x.Bitmap) != 0
	case "cosmos.bls.v1.RawCheckpoint.bls_multi_sig":
		return len(x.BlsMultiSig) != 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: cosmos.bls.v1.RawCheckpoint"))
		}
		panic(fmt.Errorf("message cosmos.bls.v1.RawCheckpoint does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_RawCheckpoint) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "cosmos.bls.v1.RawCheckpoint.epoch_num":
		x.EpochNum = uint64(0)
	case "cosmos.bls.v1.RawCheckpoint.last_commit_hash":
		x.LastCommitHash = nil
	case "cosmos.bls.v1.RawCheckpoint.bitmap":
		x.Bitmap = nil
	case "cosmos.bls.v1.RawCheckpoint.bls_multi_sig":
		x.BlsMultiSig = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: cosmos.bls.v1.RawCheckpoint"))
		}
		panic(fmt.Errorf("message cosmos.bls.v1.RawCheckpoint does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_RawCheckpoint) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "cosmos.bls.v1.RawCheckpoint.epoch_num":
		value := x.EpochNum
		return protoreflect.ValueOfUint64(value)
	case "cosmos.bls.v1.RawCheckpoint.last_commit_hash":
		value := x.LastCommitHash
		return protoreflect.ValueOfBytes(value)
	case "cosmos.bls.v1.RawCheckpoint.bitmap":
		value := x.Bitmap
		return protoreflect.ValueOfBytes(value)
	case "cosmos.bls.v1.RawCheckpoint.bls_multi_sig":
		value := x.BlsMultiSig
		return protoreflect.ValueOfBytes(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: cosmos.bls.v1.RawCheckpoint"))
		}
		panic(fmt.Errorf("message cosmos.bls.v1.RawCheckpoint does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_RawCheckpoint) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "cosmos.bls.v1.RawCheckpoint.epoch_num":
		x.EpochNum = value.Uint()
	case "cosmos.bls.v1.RawCheckpoint.last_commit_hash":
		x.LastCommitHash = value.Bytes()
	case "cosmos.bls.v1.RawCheckpoint.bitmap":
		x.Bitmap = value.Bytes()
	case "cosmos.bls.v1.RawCheckpoint.bls_multi_sig":
		x.BlsMultiSig = value.Bytes()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: cosmos.bls.v1.RawCheckpoint"))
		}
		panic(fmt.Errorf("message cosmos.bls.v1.RawCheckpoint does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_RawCheckpoint) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "cosmos.bls.v1.RawCheckpoint.epoch_num":
		panic(fmt.Errorf("field epoch_num of message cosmos.bls.v1.RawCheckpoint is not mutable"))
	case "cosmos.bls.v1.RawCheckpoint.last_commit_hash":
		panic(fmt.Errorf("field last_commit_hash of message cosmos.bls.v1.RawCheckpoint is not mutable"))
	case "cosmos.bls.v1.RawCheckpoint.bitmap":
		panic(fmt.Errorf("field bitmap of message cosmos.bls.v1.RawCheckpoint is not mutable"))
	case "cosmos.bls.v1.RawCheckpoint.bls_multi_sig":
		panic(fmt.Errorf("field bls_multi_sig of message cosmos.bls.v1.RawCheckpoint is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: cosmos.bls.v1.RawCheckpoint"))
		}
		panic(fmt.Errorf("message cosmos.bls.v1.RawCheckpoint does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_RawCheckpoint) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "cosmos.bls.v1.RawCheckpoint.epoch_num":
		return protoreflect.ValueOfUint64(uint64(0))
	case "cosmos.bls.v1.RawCheckpoint.last_commit_hash":
		return protoreflect.ValueOfBytes(nil)
	case "cosmos.bls.v1.RawCheckpoint.bitmap":
		return protoreflect.ValueOfBytes(nil)
	case "cosmos.bls.v1.RawCheckpoint.bls_multi_sig":
		return protoreflect.ValueOfBytes(nil)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: cosmos.bls.v1.RawCheckpoint"))
		}
		panic(fmt.Errorf("message cosmos.bls.v1.RawCheckpoint does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_RawCheckpoint) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in cosmos.bls.v1.RawCheckpoint", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_RawCheckpoint) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_RawCheckpoint) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_RawCheckpoint) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_RawCheckpoint) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*RawCheckpoint)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.EpochNum != 0 {
			n += 1 + runtime.Sov(uint64(x.EpochNum))
		}
		l = len(x.LastCommitHash)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Bitmap)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.BlsMultiSig)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*RawCheckpoint)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.BlsMultiSig) > 0 {
			i -= len(x.BlsMultiSig)
			copy(dAtA[i:], x.BlsMultiSig)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.BlsMultiSig)))
			i--
			dAtA[i] = 0x22
		}
		if len(x.Bitmap) > 0 {
			i -= len(x.Bitmap)
			copy(dAtA[i:], x.Bitmap)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Bitmap)))
			i--
			dAtA[i] = 0x1a
		}
		if len(x.LastCommitHash) > 0 {
			i -= len(x.LastCommitHash)
			copy(dAtA[i:], x.LastCommitHash)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.LastCommitHash)))
			i--
			dAtA[i] = 0x12
		}
		if x.EpochNum != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.EpochNum))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*RawCheckpoint)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: RawCheckpoint: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: RawCheckpoint: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field EpochNum", wireType)
				}
				x.EpochNum = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.EpochNum |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field LastCommitHash", wireType)
				}
				var byteLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					byteLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if byteLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + byteLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.LastCommitHash = append(x.LastCommitHash[:0], dAtA[iNdEx:postIndex]...)
				if x.LastCommitHash == nil {
					x.LastCommitHash = []byte{}
				}
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Bitmap", wireType)
				}
				var byteLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					byteLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if byteLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + byteLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Bitmap = append(x.Bitmap[:0], dAtA[iNdEx:postIndex]...)
				if x.Bitmap == nil {
					x.Bitmap = []byte{}
				}
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field BlsMultiSig", wireType)
				}
				var byteLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					byteLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if byteLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + byteLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.BlsMultiSig = append(x.BlsMultiSig[:0], dAtA[iNdEx:postIndex]...)
				if x.BlsMultiSig == nil {
					x.BlsMultiSig = []byte{}
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var _ protoreflect.List = (*_RawCheckpointWithMeta_5_list)(nil)

type _RawCheckpointWithMeta_5_list struct {
	list *[]*CheckpointStateUpdate
}

func (x *_RawCheckpointWithMeta_5_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_RawCheckpointWithMeta_5_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_RawCheckpointWithMeta_5_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*CheckpointStateUpdate)
	(*x.list)[i] = concreteValue
}

func (x *_RawCheckpointWithMeta_5_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*CheckpointStateUpdate)
	*x.list = append(*x.list, concreteValue)
}

func (x *_RawCheckpointWithMeta_5_list) AppendMutable() protoreflect.Value {
	v := new(CheckpointStateUpdate)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_RawCheckpointWithMeta_5_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_RawCheckpointWithMeta_5_list) NewElement() protoreflect.Value {
	v := new(CheckpointStateUpdate)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_RawCheckpointWithMeta_5_list) IsValid() bool {
	return x.list != nil
}

var (
	md_RawCheckpointWithMeta             protoreflect.MessageDescriptor
	fd_RawCheckpointWithMeta_ckpt        protoreflect.FieldDescriptor
	fd_RawCheckpointWithMeta_status      protoreflect.FieldDescriptor
	fd_RawCheckpointWithMeta_bls_aggr_pk protoreflect.FieldDescriptor
	fd_RawCheckpointWithMeta_power_sum   protoreflect.FieldDescriptor
	fd_RawCheckpointWithMeta_lifecycle   protoreflect.FieldDescriptor
)

func init() {
	file_cosmos_bls_v1_checkpoint_proto_init()
	md_RawCheckpointWithMeta = File_cosmos_bls_v1_checkpoint_proto.Messages().ByName("RawCheckpointWithMeta")
	fd_RawCheckpointWithMeta_ckpt = md_RawCheckpointWithMeta.Fields().ByName("ckpt")
	fd_RawCheckpointWithMeta_status = md_RawCheckpointWithMeta.Fields().ByName("status")
	fd_RawCheckpointWithMeta_bls_aggr_pk = md_RawCheckpointWithMeta.Fields().ByName("bls_aggr_pk")
	fd_RawCheckpointWithMeta_power_sum = md_RawCheckpointWithMeta.Fields().ByName("power_sum")
	fd_RawCheckpointWithMeta_lifecycle = md_RawCheckpointWithMeta.Fields().ByName("lifecycle")
}

var _ protoreflect.Message = (*fastReflection_RawCheckpointWithMeta)(nil)

type fastReflection_RawCheckpointWithMeta RawCheckpointWithMeta

func (x *RawCheckpointWithMeta) ProtoReflect() protoreflect.Message {
	return (*fastReflection_RawCheckpointWithMeta)(x)
}

func (x *RawCheckpointWithMeta) slowProtoReflect() protoreflect.Message {
	mi := &file_cosmos_bls_v1_checkpoint_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_RawCheckpointWithMeta_messageType fastReflection_RawCheckpointWithMeta_messageType
var _ protoreflect.MessageType = fastReflection_RawCheckpointWithMeta_messageType{}

type fastReflection_RawCheckpointWithMeta_messageType struct{}

func (x fastReflection_RawCheckpointWithMeta_messageType) Zero() protoreflect.Message {
	return (*fastReflection_RawCheckpointWithMeta)(nil)
}
func (x fastReflection_RawCheckpointWithMeta_messageType) New() protoreflect.Message {
	return new(fastReflection_RawCheckpointWithMeta)
}
func (x fastReflection_RawCheckpointWithMeta_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_RawCheckpointWithMeta
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_RawCheckpointWithMeta) Descriptor() protoreflect.MessageDescriptor {
	return md_RawCheckpointWithMeta
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_RawCheckpointWithMeta) Type() protoreflect.MessageType {
	return _fastReflection_RawCheckpointWithMeta_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_RawCheckpointWithMeta) New() protoreflect.Message {
	return new(fastReflection_RawCheckpointWithMeta)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_RawCheckpointWithMeta) Interface() protoreflect.ProtoMessage {
	return (*RawCheckpointWithMeta)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_RawCheckpointWithMeta) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Ckpt != nil {
		value := protoreflect.ValueOfMessage(x.Ckpt.ProtoReflect())
		if !f(fd_RawCheckpointWithMeta_ckpt, value) {
			return
		}
	}
	if x.Status != 0 {
		value := protoreflect.ValueOfEnum((protoreflect.EnumNumber)(x.Status))
		if !f(fd_RawCheckpointWithMeta_status, value) {
			return
		}
	}
	if len(x.BlsAggrPk) != 0 {
		value := protoreflect.ValueOfBytes(x.BlsAggrPk)
		if !f(fd_RawCheckpointWithMeta_bls_aggr_pk, value) {
			return
		}
	}
	if x.PowerSum != uint64(0) {
		value := protoreflect.ValueOfUint64(x.PowerSum)
		if !f(fd_RawCheckpointWithMeta_power_sum, value) {
			return
		}
	}
	if len(x.Lifecycle) != 0 {
		value := protoreflect.ValueOfList(&_RawCheckpointWithMeta_5_list{list: &x.Lifecycle})
		if !f(fd_RawCheckpointWithMeta_lifecycle, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_RawCheckpointWithMeta) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "cosmos.bls.v1.RawCheckpointWithMeta.ckpt":
		return x.Ckpt != nil
	case "cosmos.bls.v1.RawCheckpointWithMeta.status":
		return x.Status != 0
	case "cosmos.bls.v1.RawCheckpointWithMeta.bls_aggr_pk":
		return len(x.BlsAggrPk) != 0
	case "cosmos.bls.v1.RawCheckpointWithMeta.power_sum":
		return x.PowerSum != uint64(0)
	case "cosmos.bls.v1.RawCheckpointWithMeta.lifecycle":
		return len(x.Lifecycle) != 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: cosmos.bls.v1.RawCheckpointWithMeta"))
		}
		panic(fmt.Errorf("message cosmos.bls.v1.RawCheckpointWithMeta does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_RawCheckpointWithMeta) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "cosmos.bls.v1.RawCheckpointWithMeta.ckpt":
		x.Ckpt = nil
	case "cosmos.bls.v1.RawCheckpointWithMeta.status":
		x.Status = 0
	case "cosmos.bls.v1.RawCheckpointWithMeta.bls_aggr_pk":
		x.BlsAggrPk = nil
	case "cosmos.bls.v1.RawCheckpointWithMeta.power_sum":
		x.PowerSum = uint64(0)
	case "cosmos.bls.v1.RawCheckpointWithMeta.lifecycle":
		x.Lifecycle = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: cosmos.bls.v1.RawCheckpointWithMeta"))
		}
		panic(fmt.Errorf("message cosmos.bls.v1.RawCheckpointWithMeta does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_RawCheckpointWithMeta) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "cosmos.bls.v1.RawCheckpointWithMeta.ckpt":
		value := x.Ckpt
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "cosmos.bls.v1.RawCheckpointWithMeta.status":
		value := x.Status
		return protoreflect.ValueOfEnum((protoreflect.EnumNumber)(value))
	case "cosmos.bls.v1.RawCheckpointWithMeta.bls_aggr_pk":
		value := x.BlsAggrPk
		return protoreflect.ValueOfBytes(value)
	case "cosmos.bls.v1.RawCheckpointWithMeta.power_sum":
		value := x.PowerSum
		return protoreflect.ValueOfUint64(value)
	case "cosmos.bls.v1.RawCheckpointWithMeta.lifecycle":
		if len(x.Lifecycle) == 0 {
			return protoreflect.ValueOfList(&_RawCheckpointWithMeta_5_list{})
		}
		listValue := &_RawCheckpointWithMeta_5_list{list: &x.Lifecycle}
		return protoreflect.ValueOfList(listValue)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: cosmos.bls.v1.RawCheckpointWithMeta"))
		}
		panic(fmt.Errorf("message cosmos.bls.v1.RawCheckpointWithMeta does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_RawCheckpointWithMeta) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "cosmos.bls.v1.RawCheckpointWithMeta.ckpt":
		x.Ckpt = value.Message().Interface().(*RawCheckpoint)
	case "cosmos.bls.v1.RawCheckpointWithMeta.status":
		x.Status = (CheckpointStatus)(value.Enum())
	case "cosmos.bls.v1.RawCheckpointWithMeta.bls_aggr_pk":
		x.BlsAggrPk = value.Bytes()
	case "cosmos.bls.v1.RawCheckpointWithMeta.power_sum":
		x.PowerSum = value.Uint()
	case "cosmos.bls.v1.RawCheckpointWithMeta.lifecycle":
		lv := value.List()
		clv := lv.(*_RawCheckpointWithMeta_5_list)
		x.Lifecycle = *clv.list
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: cosmos.bls.v1.RawCheckpointWithMeta"))
		}
		panic(fmt.Errorf("message cosmos.bls.v1.RawCheckpointWithMeta does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_RawCheckpointWithMeta) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "cosmos.bls.v1.RawCheckpointWithMeta.ckpt":
		if x.Ckpt == nil {
			x.Ckpt = new(RawCheckpoint)
		}
		return protoreflect.ValueOfMessage(x.Ckpt.ProtoReflect())
	case "cosmos.bls.v1.RawCheckpointWithMeta.lifecycle":
		if x.Lifecycle == nil {
			x.Lifecycle = []*CheckpointStateUpdate{}
		}
		value := &_RawCheckpointWithMeta_5_list{list: &x.Lifecycle}
		return protoreflect.ValueOfList(value)
	case "cosmos.bls.v1.RawCheckpointWithMeta.status":
		panic(fmt.Errorf("field status of message cosmos.bls.v1.RawCheckpointWithMeta is not mutable"))
	case "cosmos.bls.v1.RawCheckpointWithMeta.bls_aggr_pk":
		panic(fmt.Errorf("field bls_aggr_pk of message cosmos.bls.v1.RawCheckpointWithMeta is not mutable"))
	case "cosmos.bls.v1.RawCheckpointWithMeta.power_sum":
		panic(fmt.Errorf("field power_sum of message cosmos.bls.v1.RawCheckpointWithMeta is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: cosmos.bls.v1.RawCheckpointWithMeta"))
		}
		panic(fmt.Errorf("message cosmos.bls.v1.RawCheckpointWithMeta does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_RawCheckpointWithMeta) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "cosmos.bls.v1.RawCheckpointWithMeta.ckpt":
		m := new(RawCheckpoint)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "cosmos.bls.v1.RawCheckpointWithMeta.status":
		return protoreflect.ValueOfEnum(0)
	case "cosmos.bls.v1.RawCheckpointWithMeta.bls_aggr_pk":
		return protoreflect.ValueOfBytes(nil)
	case "cosmos.bls.v1.RawCheckpointWithMeta.power_sum":
		return protoreflect.ValueOfUint64(uint64(0))
	case "cosmos.bls.v1.RawCheckpointWithMeta.lifecycle":
		list := []*CheckpointStateUpdate{}
		return protoreflect.ValueOfList(&_RawCheckpointWithMeta_5_list{list: &list})
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: cosmos.bls.v1.RawCheckpointWithMeta"))
		}
		panic(fmt.Errorf("message cosmos.bls.v1.RawCheckpointWithMeta does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_RawCheckpointWithMeta) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in cosmos.bls.v1.RawCheckpointWithMeta", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_RawCheckpointWithMeta) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_RawCheckpointWithMeta) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_RawCheckpointWithMeta) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_RawCheckpointWithMeta) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*RawCheckpointWithMeta)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.Ckpt != nil {
			l = options.Size(x.Ckpt)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Status != 0 {
			n += 1 + runtime.Sov(uint64(x.Status))
		}
		l = len(x.BlsAggrPk)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.PowerSum != 0 {
			n += 1 + runtime.Sov(uint64(x.PowerSum))
		}
		if len(x.Lifecycle) > 0 {
			for _, e := range x.Lifecycle {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*RawCheckpointWithMeta)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.Lifecycle) > 0 {
			for iNdEx := len(x.Lifecycle) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.Lifecycle[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x2a
			}
		}
		if x.PowerSum != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.PowerSum))
			i--
			dAtA[i] = 0x20
		}
		if len(x.BlsAggrPk) > 0 {
			i -= len(x.BlsAggrPk)
			copy(dAtA[i:], x.BlsAggrPk)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.BlsAggrPk)))
			i--
			dAtA[i] = 0x1a
		}
		if x.Status != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Status))
			i--
			dAtA[i] = 0x10
		}
		if x.Ckpt != nil {
			encoded, err := options.Marshal(x.Ckpt)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*RawCheckpointWithMeta)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: RawCheckpointWithMeta: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: RawCheckpointWithMeta: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Ckpt", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Ckpt == nil {
					x.Ckpt = &RawCheckpoint{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Ckpt); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 2:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
				}
				x.Status = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Status |= CheckpointStatus(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field BlsAggrPk", wireType)
				}
				var byteLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					byteLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if byteLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + byteLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.BlsAggrPk = append(x.BlsAggrPk[:0], dAtA[iNdEx:postIndex]...)
				if x.BlsAggrPk == nil {
					x.BlsAggrPk = []byte{}
				}
				iNdEx = postIndex
			case 4:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field PowerSum", wireType)
				}
				x.PowerSum = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.PowerSum |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 5:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Lifecycle", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Lifecycle = append(x.Lifecycle, &CheckpointStateUpdate{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Lifecycle[len(x.Lifecycle)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_CheckpointStateUpdate              protoreflect.MessageDescriptor
	fd_CheckpointStateUpdate_state        protoreflect.FieldDescriptor
	fd_CheckpointStateUpdate_block_height protoreflect.FieldDescriptor
	fd_CheckpointStateUpdate_block_time   protoreflect.FieldDescriptor
)

func init() {
	file_cosmos_bls_v1_checkpoint_proto_init()
	md_CheckpointStateUpdate = File_cosmos_bls_v1_checkpoint_proto.Messages().ByName("CheckpointStateUpdate")
	fd_CheckpointStateUpdate_state = md_CheckpointStateUpdate.Fields().ByName("state")
	fd_CheckpointStateUpdate_block_height = md_CheckpointStateUpdate.Fields().ByName("block_height")
	fd_CheckpointStateUpdate_block_time = md_CheckpointStateUpdate.Fields().ByName("block_time")
}

var _ protoreflect.Message = (*fastReflection_CheckpointStateUpdate)(nil)

type fastReflection_CheckpointStateUpdate CheckpointStateUpdate

func (x *CheckpointStateUpdate) ProtoReflect() protoreflect.Message {
	return (*fastReflection_CheckpointStateUpdate)(x)
}

func (x *CheckpointStateUpdate) slowProtoReflect() protoreflect.Message {
	mi := &file_cosmos_bls_v1_checkpoint_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_CheckpointStateUpdate_messageType fastReflection_CheckpointStateUpdate_messageType
var _ protoreflect.MessageType = fastReflection_CheckpointStateUpdate_messageType{}

type fastReflection_CheckpointStateUpdate_messageType struct{}

func (x fastReflection_CheckpointStateUpdate_messageType) Zero() protoreflect.Message {
	return (*fastReflection_CheckpointStateUpdate)(nil)
}
func (x fastReflection_CheckpointStateUpdate_messageType) New() protoreflect.Message {
	return new(fastReflection_CheckpointStateUpdate)
}
func (x fastReflection_CheckpointStateUpdate_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_CheckpointStateUpdate
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_CheckpointStateUpdate) Descriptor() protoreflect.MessageDescriptor {
	return md_CheckpointStateUpdate
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_CheckpointStateUpdate) Type() protoreflect.MessageType {
	return _fastReflection_CheckpointStateUpdate_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_CheckpointStateUpdate) New() protoreflect.Message {
	return new(fastReflection_CheckpointStateUpdate)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_CheckpointStateUpdate) Interface() protoreflect.ProtoMessage {
	return (*CheckpointStateUpdate)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_CheckpointStateUpdate) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.State != 0 {
		value := protoreflect.ValueOfEnum((protoreflect.EnumNumber)(x.State))
		if !f(fd_CheckpointStateUpdate_state, value) {
			return
		}
	}
	if x.BlockHeight != uint64(0) {
		value := protoreflect.ValueOfUint64(x.BlockHeight)
		if !f(fd_CheckpointStateUpdate_block_height, value) {
			return
		}
	}
	if x.BlockTime != nil {
		value := protoreflect.ValueOfMessage(x.BlockTime.ProtoReflect())
		if !f(fd_CheckpointStateUpdate_block_time, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_CheckpointStateUpdate) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "cosmos.bls.v1.CheckpointStateUpdate.state":
		return x.State != 0
	case "cosmos.bls.v1.CheckpointStateUpdate.block_height":
		return x.BlockHeight != uint64(0)
	case "cosmos.bls.v1.CheckpointStateUpdate.block_time":
		return x.BlockTime != nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: cosmos.bls.v1.CheckpointStateUpdate"))
		}
		panic(fmt.Errorf("message cosmos.bls.v1.CheckpointStateUpdate does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_CheckpointStateUpdate) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "cosmos.bls.v1.CheckpointStateUpdate.state":
		x.State = 0
	case "cosmos.bls.v1.CheckpointStateUpdate.block_height":
		x.BlockHeight = uint64(0)
	case "cosmos.bls.v1.CheckpointStateUpdate.block_time":
		x.BlockTime = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: cosmos.bls.v1.CheckpointStateUpdate"))
		}
		panic(fmt.Errorf("message cosmos.bls.v1.CheckpointStateUpdate does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_CheckpointStateUpdate) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "cosmos.bls.v1.CheckpointStateUpdate.state":
		value := x.State
		return protoreflect.ValueOfEnum((protoreflect.EnumNumber)(value))
	case "cosmos.bls.v1.CheckpointStateUpdate.block_height":
		value := x.BlockHeight
		return protoreflect.ValueOfUint64(value)
	case "cosmos.bls.v1.CheckpointStateUpdate.block_time":
		value := x.BlockTime
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: cosmos.bls.v1.CheckpointStateUpdate"))
		}
		panic(fmt.Errorf("message cosmos.bls.v1.CheckpointStateUpdate does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_CheckpointStateUpdate) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "cosmos.bls.v1.CheckpointStateUpdate.state":
		x.State = (CheckpointStatus)(value.Enum())
	case "cosmos.bls.v1.CheckpointStateUpdate.block_height":
		x.BlockHeight = value.Uint()
	case "cosmos.bls.v1.CheckpointStateUpdate.block_time":
		x.BlockTime = value.Message().Interface().(*timestamppb.Timestamp)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: cosmos.bls.v1.CheckpointStateUpdate"))
		}
		panic(fmt.Errorf("message cosmos.bls.v1.CheckpointStateUpdate does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_CheckpointStateUpdate) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "cosmos.bls.v1.CheckpointStateUpdate.block_time":
		if x.BlockTime == nil {
			x.BlockTime = new(timestamppb.Timestamp)
		}
		return protoreflect.ValueOfMessage(x.BlockTime.ProtoReflect())
	case "cosmos.bls.v1.CheckpointStateUpdate.state":
		panic(fmt.Errorf("field state of message cosmos.bls.v1.CheckpointStateUpdate is not mutable"))
	case "cosmos.bls.v1.CheckpointStateUpdate.block_height":
		panic(fmt.Errorf("field block_height of message cosmos.bls.v1.CheckpointStateUpdate is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: cosmos.bls.v1.CheckpointStateUpdate"))
		}
		panic(fmt.Errorf("message cosmos.bls.v1.CheckpointStateUpdate does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_CheckpointStateUpdate) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "cosmos.bls.v1.CheckpointStateUpdate.state":
		return protoreflect.ValueOfEnum(0)
	case "cosmos.bls.v1.CheckpointStateUpdate.block_height":
		return protoreflect.ValueOfUint64(uint64(0))
	case "cosmos.bls.v1.CheckpointStateUpdate.block_time":
		m := new(timestamppb.Timestamp)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: cosmos.bls.v1.CheckpointStateUpdate"))
		}
		panic(fmt.Errorf("message cosmos.bls.v1.CheckpointStateUpdate does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_CheckpointStateUpdate) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in cosmos.bls.v1.CheckpointStateUpdate", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_CheckpointStateUpdate) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_CheckpointStateUpdate) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_CheckpointStateUpdate) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_CheckpointStateUpdate) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*CheckpointStateUpdate)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.State != 0 {
			n += 1 + runtime.Sov(uint64(x.State))
		}
		if x.BlockHeight != 0 {
			n += 1 + runtime.Sov(uint64(x.BlockHeight))
		}
		if x.BlockTime != nil {
			l = options.Size(x.BlockTime)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*CheckpointStateUpdate)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.BlockTime != nil {
			encoded, err := options.Marshal(x.BlockTime)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x1a
		}
		if x.BlockHeight != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.BlockHeight))
			i--
			dAtA[i] = 0x10
		}
		if x.State != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.State))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*CheckpointStateUpdate)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: CheckpointStateUpdate: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: CheckpointStateUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
				}
				x.State = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.State |= CheckpointStatus(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 2:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
				}
				x.BlockHeight = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.BlockHeight |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field BlockTime", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.BlockTime == nil {
					x.BlockTime = &timestamppb.Timestamp{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.BlockTime); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_BlsSig                  protoreflect.MessageDescriptor
	fd_BlsSig_epoch_num        protoreflect.FieldDescriptor
	fd_BlsSig_last_commit_hash protoreflect.FieldDescriptor
	fd_BlsSig_bls_sig          protoreflect.FieldDescriptor
	fd_BlsSig_signer_address   protoreflect.FieldDescriptor
)

func init() {
	file_cosmos_bls_v1_checkpoint_proto_init()
	md_BlsSig = File_cosmos_bls_v1_checkpoint_proto.Messages().ByName("BlsSig")
	fd_BlsSig_epoch_num = md_BlsSig.Fields().ByName("epoch_num")
	fd_BlsSig_last_commit_hash = md_BlsSig.Fields().ByName("last_commit_hash")
	fd_BlsSig_bls_sig = md_BlsSig.Fields().ByName("bls_sig")
	fd_BlsSig_signer_address = md_BlsSig.Fields().ByName("signer_address")
}

var _ protoreflect.Message = (*fastReflection_BlsSig)(nil)

type fastReflection_BlsSig BlsSig

func (x *BlsSig) ProtoReflect() protoreflect.Message {
	return (*fastReflection_BlsSig)(x)
}

func (x *BlsSig) slowProtoReflect() protoreflect.Message {
	mi := &file_cosmos_bls_v1_checkpoint_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_BlsSig_messageType fastReflection_BlsSig_messageType
var _ protoreflect.MessageType = fastReflection_BlsSig_messageType{}

type fastReflection_BlsSig_messageType struct{}

func (x fastReflection_BlsSig_messageType) Zero() protoreflect.Message {
	return (*fastReflection_BlsSig)(nil)
}
func (x fastReflection_BlsSig_messageType) New() protoreflect.Message {
	return new(fastReflection_BlsSig)
}
func (x fastReflection_BlsSig_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_BlsSig
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_BlsSig) Descriptor() protoreflect.MessageDescriptor {
	return md_BlsSig
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_BlsSig) Type() protoreflect.MessageType {
	return _fastReflection_BlsSig_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_BlsSig) New() protoreflect.Message {
	return new(fastReflection_BlsSig)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_BlsSig) Interface() protoreflect.ProtoMessage {
	return (*BlsSig)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_BlsSig) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.EpochNum != uint64(0) {
		value := protoreflect.ValueOfUint64(x.EpochNum)
		if !f(fd_BlsSig_epoch_num, value) {
			return
		}
	}
	if len(x.LastCommitHash) != 0 {
		value := protoreflect.ValueOfBytes(x.LastCommitHash)
		if !f(fd_BlsSig_last_commit_hash, value) {
			return
		}
	}
	if len(x.BlsSig) != 0 {
		value := protoreflect.ValueOfBytes(x.BlsSig)
		if !f(fd_BlsSig_bls_sig, value) {
			return
		}
	}
	if x.SignerAddress != "" {
		value := protoreflect.ValueOfString(x.SignerAddress)
		if !f(fd_BlsSig_signer_address, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_BlsSig) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "cosmos.bls.v1.BlsSig.epoch_num":
		return x.EpochNum != uint64(0)
	case "cosmos.bls.v1.BlsSig.last_commit_hash":
		return len(x.LastCommitHash) != 0
	case "cosmos.bls.v1.BlsSig.bls_sig":
		return len(x.BlsSig) != 0
	case "cosmos.bls.v1.BlsSig.signer_address":
		return x.SignerAddress != ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: cosmos.bls.v1.BlsSig"))
		}
		panic(fmt.Errorf("message cosmos.bls.v1.BlsSig does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_BlsSig) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "cosmos.bls.v1.BlsSig.epoch_num":
		x.EpochNum = uint64(0)
	case "cosmos.bls.v1.BlsSig.last_commit_hash":
		x.LastCommitHash = nil
	case "cosmos.bls.v1.BlsSig.bls_sig":
		x.BlsSig = nil
	case "cosmos.bls.v1.BlsSig.signer_address":
		x.SignerAddress = ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: cosmos.bls.v1.BlsSig"))
		}
		panic(fmt.Errorf("message cosmos.bls.v1.BlsSig does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_BlsSig) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "cosmos.bls.v1.BlsSig.epoch_num":
		value := x.EpochNum
		return protoreflect.ValueOfUint64(value)
	case "cosmos.bls.v1.BlsSig.last_commit_hash":
		value := x.LastCommitHash
		return protoreflect.ValueOfBytes(value)
	case "cosmos.bls.v1.BlsSig.bls_sig":
		value := x.BlsSig
		return protoreflect.ValueOfBytes(value)
	case "cosmos.bls.v1.BlsSig.signer_address":
		value := x.SignerAddress
		return protoreflect.ValueOfString(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: cosmos.bls.v1.BlsSig"))
		}
		panic(fmt.Errorf("message cosmos.bls.v1.BlsSig does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_BlsSig) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "cosmos.bls.v1.BlsSig.epoch_num":
		x.EpochNum = value.Uint()
	case "cosmos.bls.v1.BlsSig.last_commit_hash":
		x.LastCommitHash = value.Bytes()
	case "cosmos.bls.v1.BlsSig.bls_sig":
		x.BlsSig = value.Bytes()
	case "cosmos.bls.v1.BlsSig.signer_address":
		x.SignerAddress = value.Interface().(string)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: cosmos.bls.v1.BlsSig"))
		}
		panic(fmt.Errorf("message cosmos.bls.v1.BlsSig does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_BlsSig) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "cosmos.bls.v1.BlsSig.epoch_num":
		panic(fmt.Errorf("field epoch_num of message cosmos.bls.v1.BlsSig is not mutable"))
	case "cosmos.bls.v1.BlsSig.last_commit_hash":
		panic(fmt.Errorf("field last_commit_hash of message cosmos.bls.v1.BlsSig is not mutable"))
	case "cosmos.bls.v1.BlsSig.bls_sig":
		panic(fmt.Errorf("field bls_sig of message cosmos.bls.v1.BlsSig is not mutable"))
	case "cosmos.bls.v1.BlsSig.signer_address":
		panic(fmt.Errorf("field signer_address of message cosmos.bls.v1.BlsSig is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: cosmos.bls.v1.BlsSig"))
		}
		panic(fmt.Errorf("message cosmos.bls.v1.BlsSig does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_BlsSig) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "cosmos.bls.v1.BlsSig.epoch_num":
		return protoreflect.ValueOfUint64(uint64(0))
	case "cosmos.bls.v1.BlsSig.last_commit_hash":
		return protoreflect.ValueOfBytes(nil)
	case "cosmos.bls.v1.BlsSig.bls_sig":
		return protoreflect.ValueOfBytes(nil)
	case "cosmos.bls.v1.BlsSig.signer_address":
		return protoreflect.ValueOfString("")
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: cosmos.bls.v1.BlsSig"))
		}
		panic(fmt.Errorf("message cosmos.bls.v1.BlsSig does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_BlsSig) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in cosmos.bls.v1.BlsSig", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_BlsSig) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_BlsSig) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_BlsSig) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_BlsSig) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*BlsSig)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.EpochNum != 0 {
			n += 1 + runtime.Sov(uint64(x.EpochNum))
		}
		l = len(x.LastCommitHash)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.BlsSig)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.SignerAddress)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*BlsSig)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.SignerAddress) > 0 {
			i -= len(x.SignerAddress)
			copy(dAtA[i:], x.SignerAddress)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.SignerAddress)))
			i--
			dAtA[i] = 0x22
		}
		if len(x.BlsSig) > 0 {
			i -= len(x.BlsSig)
			copy(dAtA[i:], x.BlsSig)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.BlsSig)))
			i--
			dAtA[i] = 0x1a
		}
		if len(x.LastCommitHash) > 0 {
			i -= len(x.LastCommitHash)
			copy(dAtA[i:], x.LastCommitHash)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.LastCommitHash)))
			i--
			dAtA[i] = 0x12
		}
		if x.EpochNum != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.EpochNum))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*BlsSig)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: BlsSig: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: BlsSig: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field EpochNum", wireType)
				}
				x.EpochNum = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.EpochNum |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field LastCommitHash", wireType)
				}
				var byteLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					byteLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if byteLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + byteLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.LastCommitHash = append(x.LastCommitHash[:0], dAtA[iNdEx:postIndex]...)
				if x.LastCommitHash == nil {
					x.LastCommitHash = []byte{}
				}
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field BlsSig", wireType)
				}
				var byteLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					byteLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if byteLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + byteLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.BlsSig = append(x.BlsSig[:0], dAtA[iNdEx:postIndex]...)
				if x.BlsSig == nil {
					x.BlsSig = []byte{}
				}
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field SignerAddress", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.SignerAddress = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.0
// 	protoc        (unknown)
// source: cosmos/bls/v1/checkpoint.proto

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// CheckpointStatus is the status of a checkpoint.
type CheckpointStatus int32

const (
	// ACCUMULATING defines a checkpoint that is awaiting for BLS signatures.
	CheckpointStatus_CKPT_STATUS_ACCUMULATING CheckpointStatus = 0
	// SEALED defines a checkpoint that has accumulated sufficient BLS signatures.
	CheckpointStatus_CKPT_STATUS_SEALED CheckpointStatus = 1
	// SUBMITTED defines a checkpoint that is included on BTC.
	CheckpointStatus_CKPT_STATUS_SUBMITTED CheckpointStatus = 2
	// CONFIRMED defines a checkpoint that is k-deep on BTC.
	CheckpointStatus_CKPT_STATUS_CONFIRMED CheckpointStatus = 3
	// FINALIZED defines a checkpoint that is w-deep on BTC.
	CheckpointStatus_CKPT_STATUS_FINALIZED CheckpointStatus = 4
)

// Enum value maps for CheckpointStatus.
var (
	CheckpointStatus_name = map[int32]string{
		0: "CKPT_STATUS_ACCUMULATING",
		1: "CKPT_STATUS_SEALED",
		2: "CKPT_STATUS_SUBMITTED",
		3: "CKPT_STATUS_CONFIRMED",
		4: "CKPT_STATUS_FINALIZED",
	}
	CheckpointStatus_value = map[string]int32{
		"CKPT_STATUS_ACCUMULATING": 0,
		"CKPT_STATUS_SEALED":       1,
		"CKPT_STATUS_SUBMITTED":    2,
		"CKPT_STATUS_CONFIRMED":    3,
		"CKPT_STATUS_FINALIZED":    4,
	}
)

func (x CheckpointStatus) Enum() *CheckpointStatus {
	p := new(CheckpointStatus)
	*p = x
	return p
}

func (x CheckpointStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CheckpointStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_cosmos_bls_v1_checkpoint_proto_enumTypes[0].Descriptor()
}

func (CheckpointStatus) Type() protoreflect.EnumType {
	return &file_cosmos_bls_v1_checkpoint_proto_enumTypes[0]
}

func (x CheckpointStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CheckpointStatus.Descriptor instead.
func (CheckpointStatus) EnumDescriptor() ([]byte, []int) {
	return file_cosmos_bls_v1_checkpoint_proto_rawDescGZIP(), []int{0}
}

// RawCheckpoint wraps the BLS multi sig with meta data
type RawCheckpoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// epoch_num defines the epoch number the raw checkpoint is for
	EpochNum uint64 `protobuf:"varint,1,opt,name=epoch_num,json=epochNum,proto3" json:"epoch_num,omitempty"`
	// last_commit_hash defines the 'LastCommitHash' that individual BLS sigs are
	// signed on
	LastCommitHash []byte `protobuf:"bytes,2,opt,name=last_commit_hash,json=lastCommitHash,proto3" json:"last_commit_hash,omitempty"`
	// bitmap defines the bitmap that indicates the signers of the BLS multi sig
	Bitmap []byte `protobuf:"bytes,3,opt,name=bitmap,proto3" json:"bitmap,omitempty"`
	// bls_multi_sig defines the multi sig that is aggregated from individual BLS
	// sigs
	BlsMultiSig []byte `protobuf:"bytes,4,opt,name=bls_multi_sig,json=blsMultiSig,proto3" json:"bls_multi_sig,omitempty"`
}

func (x *RawCheckpoint) Reset() {
	*x = RawCheckpoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cosmos_bls_v1_checkpoint_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RawCheckpoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RawCheckpoint) ProtoMessage() {}

// Deprecated: Use RawCheckpoint.ProtoReflect.Descriptor instead.
func (*RawCheckpoint) Descriptor() ([]byte, []int) {
	return file_cosmos_bls_v1_checkpoint_proto_rawDescGZIP(), []int{0}
}

func (x *RawCheckpoint) GetEpochNum() uint64 {
	if x != nil {
		return x.EpochNum
	}
	return 0
}

func (x *RawCheckpoint) GetLastCommitHash() []byte {
	if x != nil {
		return x.LastCommitHash
	}
	return nil
}

func (x *RawCheckpoint) GetBitmap() []byte {
	if x != nil {
		return x.Bitmap
	}
	return nil
}

func (x *RawCheckpoint) GetBlsMultiSig() []byte {
	if x != nil {
		return x.BlsMultiSig
	}
	return nil
}

// RawCheckpointWithMeta wraps the raw checkpoint with meta data.
type RawCheckpointWithMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ckpt *RawCheckpoint `protobuf:"bytes,1,opt,name=ckpt,proto3" json:"ckpt,omitempty"`
	// status defines the status of the checkpoint
	Status CheckpointStatus `protobuf:"varint,2,opt,name=status,proto3,enum=cosmos.bls.v1.CheckpointStatus" json:"status,omitempty"`
	// bls_aggr_pk defines the aggregated BLS public key
	BlsAggrPk []byte `protobuf:"bytes,3,opt,name=bls_aggr_pk,json=blsAggrPk,proto3" json:"bls_aggr_pk,omitempty"`
	// power_sum defines the accumulated voting power for the checkpoint
	PowerSum uint64 `protobuf:"varint,4,opt,name=power_sum,json=powerSum,proto3" json:"power_sum,omitempty"`
	// lifecycle defines the lifecycle of this checkpoint, i.e., each state
	// transition and the time (in both timestamp and block height) of this
	// transition.
	Lifecycle []*CheckpointStateUpdate `protobuf:"bytes,5,rep,name=lifecycle,proto3" json:"lifecycle,omitempty"`
}

func (x *RawCheckpointWithMeta) Reset() {
	*x = RawCheckpointWithMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cosmos_bls_v1_checkpoint_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RawCheckpointWithMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RawCheckpointWithMeta) ProtoMessage() {}

// Deprecated: Use RawCheckpointWithMeta.ProtoReflect.Descriptor instead.
func (*RawCheckpointWithMeta) Descriptor() ([]byte, []int) {
	return file_cosmos_bls_v1_checkpoint_proto_rawDescGZIP(), []int{1}
}

func (x *RawCheckpointWithMeta) GetCkpt() *RawCheckpoint {
	if x != nil {
		return x.Ckpt
	}
	return nil
}

func (x *RawCheckpointWithMeta) GetStatus() CheckpointStatus {
	if x != nil {
		return x.Status
	}
	return CheckpointStatus_CKPT_STATUS_ACCUMULATING
}

func (x *RawCheckpointWithMeta) GetBlsAggrPk() []byte {
	if x != nil {
		return x.BlsAggrPk
	}
	return nil
}

func (x *RawCheckpointWithMeta) GetPowerSum() uint64 {
	if x != nil {
		return x.PowerSum
	}
	return 0
}

func (x *RawCheckpointWithMeta) GetLifecycle() []*CheckpointStateUpdate {
	if x != nil {
		return x.Lifecycle
	}
	return nil
}

// CheckpointStateUpdate defines a state transition on the checkpoint.
type CheckpointStateUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// state defines the event of a state transition towards this state
	State CheckpointStatus `protobuf:"varint,1,opt,name=state,proto3,enum=cosmos.bls.v1.CheckpointStatus" json:"state,omitempty"`
	// block_height is the height of the Babylon block that triggers the state
	// update
	BlockHeight uint64 `protobuf:"varint,2,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	// block_time is the timestamp in the Babylon block that triggers the state
	// update
	BlockTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=block_time,json=blockTime,proto3" json:"block_time,omitempty"`
}

func (x *CheckpointStateUpdate) Reset() {
	*x = CheckpointStateUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cosmos_bls_v1_checkpoint_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckpointStateUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckpointStateUpdate) ProtoMessage() {}

// Deprecated: Use CheckpointStateUpdate.ProtoReflect.Descriptor instead.
func (*CheckpointStateUpdate) Descriptor() ([]byte, []int) {
	return file_cosmos_bls_v1_checkpoint_proto_rawDescGZIP(), []int{2}
}

func (x *CheckpointStateUpdate) GetState() CheckpointStatus {
	if x != nil {
		return x.State
	}
	return CheckpointStatus_CKPT_STATUS_ACCUMULATING
}

func (x *CheckpointStateUpdate) GetBlockHeight() uint64 {
	if x != nil {
		return x.BlockHeight
	}
	return 0
}

func (x *CheckpointStateUpdate) GetBlockTime() *timestamppb.Timestamp {
	if x != nil {
		return x.BlockTime
	}
	return nil
}

// BlsSig wraps the BLS sig with meta data.
type BlsSig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// epoch_num defines the epoch number that the BLS sig is signed on
	EpochNum uint64 `protobuf:"varint,1,opt,name=epoch_num,json=epochNum,proto3" json:"epoch_num,omitempty"`
	// last_commit_hash defines the 'LastCommitHash' that the BLS sig is signed on
	LastCommitHash []byte `protobuf:"bytes,2,opt,name=last_commit_hash,json=lastCommitHash,proto3" json:"last_commit_hash,omitempty"`
	BlsSig         []byte `protobuf:"bytes,3,opt,name=bls_sig,json=blsSig,proto3" json:"bls_sig,omitempty"`
	// can't find cosmos_proto.scalar when compiling due to cosmos v0.45.4 does
	// not support scalar string signer_address = 4 [(cosmos_proto.scalar) =
	// "cosmos.AddressString"]; the signer_address defines the address of the
	// signer
	SignerAddress string `protobuf:"bytes,4,opt,name=signer_address,json=signerAddress,proto3" json:"signer_address,omitempty"`
}

func (x *BlsSig) Reset() {
	*x = BlsSig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cosmos_bls_v1_checkpoint_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlsSig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlsSig) ProtoMessage() {}

// Deprecated: Use BlsSig.ProtoReflect.Descriptor instead.
func (*BlsSig) Descriptor() ([]byte, []int) {
	return file_cosmos_bls_v1_checkpoint_proto_rawDescGZIP(), []int{3}
}

func (x *BlsSig) GetEpochNum() uint64 {
	if x != nil {
		return x.EpochNum
	}
	return 0
}

func (x *BlsSig) GetLastCommitHash() []byte {
	if x != nil {
		return x.LastCommitHash
	}
	return nil
}

func (x *BlsSig) GetBlsSig() []byte {
	if x != nil {
		return x.BlsSig
	}
	return nil
}

func (x *BlsSig) GetSignerAddress() string {
	if x != nil {
		return x.SignerAddress
	}
	return ""
}

var File_cosmos_bls_v1_checkpoint_proto protoreflect.FileDescriptor

var file_cosmos_bls_v1_checkpoint_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f, 0x62, 0x6c, 0x73, 0x2f, 0x76, 0x31, 0x2f,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x0d, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x62, 0x6c, 0x73, 0x2e, 0x76, 0x31, 0x1a,
	0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x14, 0x67, 0x6f, 0x67, 0x6f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x67, 0x6f,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f, 0x6d,
	0x73, 0x67, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x73, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x11, 0x61, 0x6d, 0x69, 0x6e, 0x6f, 0x2f, 0x61, 0x6d, 0x69, 0x6e, 0x6f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xed, 0x01, 0x0a, 0x0d, 0x52, 0x61, 0x77, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x5f, 0x6e, 0x75,
	0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x4e, 0x75,
	0x6d, 0x12, 0x3c, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x12, 0xda, 0xde, 0x1f,
	0x0e, 0x4c, 0x61, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x48, 0x61, 0x73, 0x68, 0x52,
	0x0e, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12,
	0x16, 0x0a, 0x06, 0x62, 0x69, 0x74, 0x6d, 0x61, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x06, 0x62, 0x69, 0x74, 0x6d, 0x61, 0x70, 0x12, 0x63, 0x0a, 0x0d, 0x62, 0x6c, 0x73, 0x5f, 0x6d,
	0x75, 0x6c, 0x74, 0x69, 0x5f, 0x73, 0x69, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x3f,
	0xda, 0xde, 0x1f, 0x3b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63,
	0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2d, 0x73, 0x64, 0x6b,
	0x2f, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2f, 0x6b, 0x65, 0x79, 0x73, 0x2f, 0x62, 0x6c, 0x73,
	0x31, 0x32, 0x33, 0x38, 0x31, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52,
	0x0b, 0x62, 0x6c, 0x73, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x69, 0x67, 0x3a, 0x04, 0xe8, 0xa0,
	0x1f, 0x01, 0x22, 0xca, 0x02, 0x0a, 0x15, 0x52, 0x61, 0x77, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x57, 0x69, 0x74, 0x68, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x30, 0x0a, 0x04,
	0x63, 0x6b, 0x70, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x73,
	0x6d, 0x6f, 0x73, 0x2e, 0x62, 0x6c, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x77, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x04, 0x63, 0x6b, 0x70, 0x74, 0x12, 0x37,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f,
	0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x62, 0x6c, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x5f, 0x0a, 0x0b, 0x62, 0x6c, 0x73, 0x5f, 0x61,
	0x67, 0x67, 0x72, 0x5f, 0x70, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x3f, 0xda, 0xde,
	0x1f, 0x3b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x73,
	0x6d, 0x6f, 0x73, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x6f, 0x2f, 0x6b, 0x65, 0x79, 0x73, 0x2f, 0x62, 0x6c, 0x73, 0x31, 0x32,
	0x33, 0x38, 0x31, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x52, 0x09, 0x62,
	0x6c, 0x73, 0x41, 0x67, 0x67, 0x72, 0x50, 0x6b, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6f, 0x77, 0x65,
	0x72, 0x5f, 0x73, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x70, 0x6f, 0x77,
	0x65, 0x72, 0x53, 0x75, 0x6d, 0x12, 0x42, 0x0a, 0x09, 0x6c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63,
	0x6c, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f,
	0x73, 0x2e, 0x62, 0x6c, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x09,
	0x6c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x3a, 0x04, 0xe8, 0xa0, 0x1f, 0x01, 0x22,
	0xb8, 0x01, 0x0a, 0x15, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x35, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f,
	0x73, 0x2e, 0x62, 0x6c, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x21, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x12, 0x3f, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x42, 0x04, 0x90, 0xdf, 0x1f, 0x01, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x54, 0x69, 0x6d, 0x65, 0x3a, 0x04, 0xe8, 0xa0, 0x1f, 0x01, 0x22, 0xfd, 0x01, 0x0a, 0x06, 0x42,
	0x6c, 0x73, 0x53, 0x69, 0x67, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x5f, 0x6e,
	0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x4e,
	0x75, 0x6d, 0x12, 0x3c, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x12, 0xda, 0xde,
	0x1f, 0x0e, 0x4c, 0x61, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x48, 0x61, 0x73, 0x68,
	0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x48, 0x61, 0x73, 0x68,
	0x12, 0x58, 0x0a, 0x07, 0x62, 0x6c, 0x73, 0x5f, 0x73, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0c, 0x42, 0x3f, 0xda, 0xde, 0x1f, 0x3b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2d,
	0x73, 0x64, 0x6b, 0x2f, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2f, 0x6b, 0x65, 0x79, 0x73, 0x2f,
	0x62, 0x6c, 0x73, 0x31, 0x32, 0x33, 0x38, 0x31, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x52, 0x06, 0x62, 0x6c, 0x73, 0x53, 0x69, 0x67, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x69,
	0x67, 0x6e, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x3a, 0x17, 0xe8, 0xa0, 0x1f, 0x00, 0x82, 0xe7, 0xb0, 0x2a, 0x0e, 0x73, 0x69, 0x67, 0x6e,
	0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2a, 0xea, 0x01, 0x0a, 0x10, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x2e, 0x0a, 0x18, 0x43, 0x4b, 0x50, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x41,
	0x43, 0x43, 0x55, 0x4d, 0x55, 0x4c, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x00, 0x1a, 0x10, 0x8a,
	0x9d, 0x20, 0x0c, 0x41, 0x63, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12,
	0x22, 0x0a, 0x12, 0x43, 0x4b, 0x50, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53,
	0x45, 0x41, 0x4c, 0x45, 0x44, 0x10, 0x01, 0x1a, 0x0a, 0x8a, 0x9d, 0x20, 0x06, 0x53, 0x65, 0x61,
	0x6c, 0x65, 0x64, 0x12, 0x28, 0x0a, 0x15, 0x43, 0x4b, 0x50, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x53, 0x55, 0x42, 0x4d, 0x49, 0x54, 0x54, 0x45, 0x44, 0x10, 0x02, 0x1a, 0x0d,
	0x8a, 0x9d, 0x20, 0x09, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x12, 0x28, 0x0a,
	0x15, 0x43, 0x4b, 0x50, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x52, 0x4d, 0x45, 0x44, 0x10, 0x03, 0x1a, 0x0d, 0x8a, 0x9d, 0x20, 0x09, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x12, 0x28, 0x0a, 0x15, 0x43, 0x4b, 0x50, 0x54, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x46, 0x49, 0x4e, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44,
	0x10, 0x04, 0x1a, 0x0d, 0x8a, 0x9d, 0x20, 0x09, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65,
	0x64, 0x1a, 0x04, 0x88, 0xa3, 0x1e, 0x00, 0x42, 0xa0, 0x01, 0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x2e,
	0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x62, 0x6c, 0x73, 0x2e, 0x76, 0x31, 0x42, 0x0f, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01,
	0x5a, 0x24, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f, 0x62, 0x6c, 0x73, 0x2f, 0x76, 0x31,
	0x3b, 0x62, 0x6c, 0x73, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x43, 0x42, 0x58, 0xaa, 0x02, 0x0d, 0x43,
	0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x42, 0x6c, 0x73, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x0d, 0x43,
	0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x5c, 0x42, 0x6c, 0x73, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x19, 0x43,
	0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x5c, 0x42, 0x6c, 0x73, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x0f, 0x43, 0x6f, 0x73, 0x6d, 0x6f,
	0x73, 0x3a, 0x3a, 0x42, 0x6c, 0x73, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_cosmos_bls_v1_checkpoint_proto_rawDescOnce sync.Once
	file_cosmos_bls_v1_checkpoint_proto_rawDescData = file_cosmos_bls_v1_checkpoint_proto_rawDesc
)

func file_cosmos_bls_v1_checkpoint_proto_rawDescGZIP() []byte {
	file_cosmos_bls_v1_checkpoint_proto_rawDescOnce.Do(func() {
		file_cosmos_bls_v1_checkpoint_proto_rawDescData = protoimpl.X.CompressGZIP(file_cosmos_bls_v1_checkpoint_proto_rawDescData)
	})
	return file_cosmos_bls_v1_checkpoint_proto_rawDescData
}

var file_cosmos_bls_v1_checkpoint_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_cosmos_bls_v1_checkpoint_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_cosmos_bls_v1_checkpoint_proto_goTypes = []interface{}{
	(CheckpointStatus)(0),         // 0: cosmos.bls.v1.CheckpointStatus
	(*RawCheckpoint)(nil),         // 1: cosmos.bls.v1.RawCheckpoint
	(*RawCheckpointWithMeta)(nil), // 2: cosmos.bls.v1.RawCheckpointWithMeta
	(*CheckpointStateUpdate)(nil), // 3: cosmos.bls.v1.CheckpointStateUpdate
	(*BlsSig)(nil),                // 4: cosmos.bls.v1.BlsSig
	(*timestamppb.Timestamp)(nil), // 5: google.protobuf.Timestamp
}
var file_cosmos_bls_v1_checkpoint_proto_depIdxs = []int32{
	1, // 0: cosmos.bls.v1.RawCheckpointWithMeta.ckpt:type_name -> cosmos.bls.v1.RawCheckpoint
	0, // 1: cosmos.bls.v1.RawCheckpointWithMeta.status:type_name -> cosmos.bls.v1.CheckpointStatus
	3, // 2: cosmos.bls.v1.RawCheckpointWithMeta.lifecycle:type_name -> cosmos.bls.v1.CheckpointStateUpdate
	0, // 3: cosmos.bls.v1.CheckpointStateUpdate.state:type_name -> cosmos.bls.v1.CheckpointStatus
	5, // 4: cosmos.bls.v1.CheckpointStateUpdate.block_time:type_name -> google.protobuf.Timestamp
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_cosmos_bls_v1_checkpoint_proto_init() }
func file_cosmos_bls_v1_checkpoint_proto_init() {
	if File_cosmos_bls_v1_checkpoint_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cosmos_bls_v1_checkpoint_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RawCheckpoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cosmos_bls_v1_checkpoint_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RawCheckpointWithMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cosmos_bls_v1_checkpoint_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckpointStateUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cosmos_bls_v1_checkpoint_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlsSig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cosmos_bls_v1_checkpoint_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_cosmos_bls_v1_checkpoint_proto_goTypes,
		DependencyIndexes: file_cosmos_bls_v1_checkpoint_proto_depIdxs,
		EnumInfos:         file_cosmos_bls_v1_checkpoint_proto_enumTypes,
		MessageInfos:      file_cosmos_bls_v1_checkpoint_proto_msgTypes,
	}.Build()
	File_cosmos_bls_v1_checkpoint_proto = out.File
	file_cosmos_bls_v1_checkpoint_proto_rawDesc = nil
	file_cosmos_bls_v1_checkpoint_proto_goTypes = nil
	file_cosmos_bls_v1_checkpoint_proto_depIdxs = nil
}
